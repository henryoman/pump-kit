/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PUMP_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const SELL_DISCRIMINATOR = new Uint8Array([
  51, 230, 133, 164, 1, 127, 131, 173,
]);

export function getSellDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SELL_DISCRIMINATOR);
}

export type SellInstruction<
  TProgram extends string = typeof PUMP_PROGRAM_ADDRESS,
  TAccountGlobal extends string | AccountMeta<string> = string,
  TAccountFeeRecipient extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountBondingCurve extends string | AccountMeta<string> = string,
  TAccountAssociatedBondingCurve extends string | AccountMeta<string> = string,
  TAccountAssociatedUser extends string | AccountMeta<string> = string,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountCreatorVault extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends
    | string
    | AccountMeta<string> = '6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P',
  TAccountFeeConfig extends string | AccountMeta<string> = string,
  TAccountFeeProgram extends
    | string
    | AccountMeta<string> = 'pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGlobal extends string
        ? ReadonlyAccount<TAccountGlobal>
        : TAccountGlobal,
      TAccountFeeRecipient extends string
        ? WritableAccount<TAccountFeeRecipient>
        : TAccountFeeRecipient,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountBondingCurve extends string
        ? WritableAccount<TAccountBondingCurve>
        : TAccountBondingCurve,
      TAccountAssociatedBondingCurve extends string
        ? WritableAccount<TAccountAssociatedBondingCurve>
        : TAccountAssociatedBondingCurve,
      TAccountAssociatedUser extends string
        ? WritableAccount<TAccountAssociatedUser>
        : TAccountAssociatedUser,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountCreatorVault extends string
        ? WritableAccount<TAccountCreatorVault>
        : TAccountCreatorVault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      TAccountFeeConfig extends string
        ? ReadonlyAccount<TAccountFeeConfig>
        : TAccountFeeConfig,
      TAccountFeeProgram extends string
        ? ReadonlyAccount<TAccountFeeProgram>
        : TAccountFeeProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SellInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
  minSolOutput: bigint;
};

export type SellInstructionDataArgs = {
  amount: number | bigint;
  minSolOutput: number | bigint;
};

export function getSellInstructionDataEncoder(): FixedSizeEncoder<SellInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
      ['minSolOutput', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SELL_DISCRIMINATOR })
  );
}

export function getSellInstructionDataDecoder(): FixedSizeDecoder<SellInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
    ['minSolOutput', getU64Decoder()],
  ]);
}

export function getSellInstructionDataCodec(): FixedSizeCodec<
  SellInstructionDataArgs,
  SellInstructionData
> {
  return combineCodec(
    getSellInstructionDataEncoder(),
    getSellInstructionDataDecoder()
  );
}

export type SellAsyncInput<
  TAccountGlobal extends string = string,
  TAccountFeeRecipient extends string = string,
  TAccountMint extends string = string,
  TAccountBondingCurve extends string = string,
  TAccountAssociatedBondingCurve extends string = string,
  TAccountAssociatedUser extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountCreatorVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
  TAccountFeeConfig extends string = string,
  TAccountFeeProgram extends string = string,
> = {
  global?: Address<TAccountGlobal>;
  feeRecipient: Address<TAccountFeeRecipient>;
  mint: Address<TAccountMint>;
  bondingCurve?: Address<TAccountBondingCurve>;
  associatedBondingCurve?: Address<TAccountAssociatedBondingCurve>;
  associatedUser: Address<TAccountAssociatedUser>;
  user: TransactionSigner<TAccountUser>;
  systemProgram?: Address<TAccountSystemProgram>;
  creatorVault: Address<TAccountCreatorVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program?: Address<TAccountProgram>;
  feeConfig?: Address<TAccountFeeConfig>;
  feeProgram?: Address<TAccountFeeProgram>;
  amount: SellInstructionDataArgs['amount'];
  minSolOutput: SellInstructionDataArgs['minSolOutput'];
};

export async function getSellInstructionAsync<
  TAccountGlobal extends string,
  TAccountFeeRecipient extends string,
  TAccountMint extends string,
  TAccountBondingCurve extends string,
  TAccountAssociatedBondingCurve extends string,
  TAccountAssociatedUser extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TAccountCreatorVault extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TAccountFeeConfig extends string,
  TAccountFeeProgram extends string,
  TProgramAddress extends Address = typeof PUMP_PROGRAM_ADDRESS,
>(
  input: SellAsyncInput<
    TAccountGlobal,
    TAccountFeeRecipient,
    TAccountMint,
    TAccountBondingCurve,
    TAccountAssociatedBondingCurve,
    TAccountAssociatedUser,
    TAccountUser,
    TAccountSystemProgram,
    TAccountCreatorVault,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountFeeConfig,
    TAccountFeeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SellInstruction<
    TProgramAddress,
    TAccountGlobal,
    TAccountFeeRecipient,
    TAccountMint,
    TAccountBondingCurve,
    TAccountAssociatedBondingCurve,
    TAccountAssociatedUser,
    TAccountUser,
    TAccountSystemProgram,
    TAccountCreatorVault,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountFeeConfig,
    TAccountFeeProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    global: { value: input.global ?? null, isWritable: false },
    feeRecipient: { value: input.feeRecipient ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    bondingCurve: { value: input.bondingCurve ?? null, isWritable: true },
    associatedBondingCurve: {
      value: input.associatedBondingCurve ?? null,
      isWritable: true,
    },
    associatedUser: { value: input.associatedUser ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    creatorVault: { value: input.creatorVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
    feeConfig: { value: input.feeConfig ?? null, isWritable: false },
    feeProgram: { value: input.feeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.global.value) {
    accounts.global.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([103, 108, 111, 98, 97, 108])),
      ],
    });
  }
  if (!accounts.bondingCurve.value) {
    accounts.bondingCurve.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            98, 111, 110, 100, 105, 110, 103, 45, 99, 117, 114, 118, 101,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.associatedBondingCurve.value) {
    accounts.associatedBondingCurve.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.bondingCurve.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.program.value) {
    accounts.program.value =
      '6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P' as Address<'6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P'>;
  }
  if (!accounts.feeConfig.value) {
    accounts.feeConfig.value = await getProgramDerivedAddress({
      programAddress:
        'pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ' as Address<'pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([102, 101, 101, 95, 99, 111, 110, 102, 105, 103])
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            1, 86, 224, 246, 147, 102, 90, 207, 68, 219, 21, 104, 191, 23, 91,
            170, 81, 137, 203, 151, 245, 210, 255, 59, 101, 93, 43, 182, 253,
            109, 24, 176,
          ])
        ),
      ],
    });
  }
  if (!accounts.feeProgram.value) {
    accounts.feeProgram.value =
      'pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ' as Address<'pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.global),
      getAccountMeta(accounts.feeRecipient),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.bondingCurve),
      getAccountMeta(accounts.associatedBondingCurve),
      getAccountMeta(accounts.associatedUser),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.creatorVault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
      getAccountMeta(accounts.feeConfig),
      getAccountMeta(accounts.feeProgram),
    ],
    data: getSellInstructionDataEncoder().encode(
      args as SellInstructionDataArgs
    ),
    programAddress,
  } as SellInstruction<
    TProgramAddress,
    TAccountGlobal,
    TAccountFeeRecipient,
    TAccountMint,
    TAccountBondingCurve,
    TAccountAssociatedBondingCurve,
    TAccountAssociatedUser,
    TAccountUser,
    TAccountSystemProgram,
    TAccountCreatorVault,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountFeeConfig,
    TAccountFeeProgram
  >);
}

export type SellInput<
  TAccountGlobal extends string = string,
  TAccountFeeRecipient extends string = string,
  TAccountMint extends string = string,
  TAccountBondingCurve extends string = string,
  TAccountAssociatedBondingCurve extends string = string,
  TAccountAssociatedUser extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountCreatorVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
  TAccountFeeConfig extends string = string,
  TAccountFeeProgram extends string = string,
> = {
  global: Address<TAccountGlobal>;
  feeRecipient: Address<TAccountFeeRecipient>;
  mint: Address<TAccountMint>;
  bondingCurve: Address<TAccountBondingCurve>;
  associatedBondingCurve: Address<TAccountAssociatedBondingCurve>;
  associatedUser: Address<TAccountAssociatedUser>;
  user: TransactionSigner<TAccountUser>;
  systemProgram?: Address<TAccountSystemProgram>;
  creatorVault: Address<TAccountCreatorVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program?: Address<TAccountProgram>;
  feeConfig: Address<TAccountFeeConfig>;
  feeProgram?: Address<TAccountFeeProgram>;
  amount: SellInstructionDataArgs['amount'];
  minSolOutput: SellInstructionDataArgs['minSolOutput'];
};

export function getSellInstruction<
  TAccountGlobal extends string,
  TAccountFeeRecipient extends string,
  TAccountMint extends string,
  TAccountBondingCurve extends string,
  TAccountAssociatedBondingCurve extends string,
  TAccountAssociatedUser extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TAccountCreatorVault extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TAccountFeeConfig extends string,
  TAccountFeeProgram extends string,
  TProgramAddress extends Address = typeof PUMP_PROGRAM_ADDRESS,
>(
  input: SellInput<
    TAccountGlobal,
    TAccountFeeRecipient,
    TAccountMint,
    TAccountBondingCurve,
    TAccountAssociatedBondingCurve,
    TAccountAssociatedUser,
    TAccountUser,
    TAccountSystemProgram,
    TAccountCreatorVault,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountFeeConfig,
    TAccountFeeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SellInstruction<
  TProgramAddress,
  TAccountGlobal,
  TAccountFeeRecipient,
  TAccountMint,
  TAccountBondingCurve,
  TAccountAssociatedBondingCurve,
  TAccountAssociatedUser,
  TAccountUser,
  TAccountSystemProgram,
  TAccountCreatorVault,
  TAccountTokenProgram,
  TAccountEventAuthority,
  TAccountProgram,
  TAccountFeeConfig,
  TAccountFeeProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    global: { value: input.global ?? null, isWritable: false },
    feeRecipient: { value: input.feeRecipient ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    bondingCurve: { value: input.bondingCurve ?? null, isWritable: true },
    associatedBondingCurve: {
      value: input.associatedBondingCurve ?? null,
      isWritable: true,
    },
    associatedUser: { value: input.associatedUser ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    creatorVault: { value: input.creatorVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
    feeConfig: { value: input.feeConfig ?? null, isWritable: false },
    feeProgram: { value: input.feeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.program.value) {
    accounts.program.value =
      '6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P' as Address<'6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P'>;
  }
  if (!accounts.feeProgram.value) {
    accounts.feeProgram.value =
      'pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ' as Address<'pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.global),
      getAccountMeta(accounts.feeRecipient),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.bondingCurve),
      getAccountMeta(accounts.associatedBondingCurve),
      getAccountMeta(accounts.associatedUser),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.creatorVault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
      getAccountMeta(accounts.feeConfig),
      getAccountMeta(accounts.feeProgram),
    ],
    data: getSellInstructionDataEncoder().encode(
      args as SellInstructionDataArgs
    ),
    programAddress,
  } as SellInstruction<
    TProgramAddress,
    TAccountGlobal,
    TAccountFeeRecipient,
    TAccountMint,
    TAccountBondingCurve,
    TAccountAssociatedBondingCurve,
    TAccountAssociatedUser,
    TAccountUser,
    TAccountSystemProgram,
    TAccountCreatorVault,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountFeeConfig,
    TAccountFeeProgram
  >);
}

export type ParsedSellInstruction<
  TProgram extends string = typeof PUMP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    global: TAccountMetas[0];
    feeRecipient: TAccountMetas[1];
    mint: TAccountMetas[2];
    bondingCurve: TAccountMetas[3];
    associatedBondingCurve: TAccountMetas[4];
    associatedUser: TAccountMetas[5];
    user: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    creatorVault: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
    eventAuthority: TAccountMetas[10];
    program: TAccountMetas[11];
    feeConfig: TAccountMetas[12];
    feeProgram: TAccountMetas[13];
  };
  data: SellInstructionData;
};

export function parseSellInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSellInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      global: getNextAccount(),
      feeRecipient: getNextAccount(),
      mint: getNextAccount(),
      bondingCurve: getNextAccount(),
      associatedBondingCurve: getNextAccount(),
      associatedUser: getNextAccount(),
      user: getNextAccount(),
      systemProgram: getNextAccount(),
      creatorVault: getNextAccount(),
      tokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
      feeConfig: getNextAccount(),
      feeProgram: getNextAccount(),
    },
    data: getSellInstructionDataDecoder().decode(instruction.data),
  };
}
