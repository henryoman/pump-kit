/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { PUMP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_GLOBAL_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  227, 181, 74, 196, 208, 21, 97, 213,
]);

export function getUpdateGlobalAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_GLOBAL_AUTHORITY_DISCRIMINATOR
  );
}

export type UpdateGlobalAuthorityInstruction<
  TProgram extends string = typeof PUMP_PROGRAM_ADDRESS,
  TAccountGlobal extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountNewAuthority extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGlobal extends string
        ? WritableAccount<TAccountGlobal>
        : TAccountGlobal,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountNewAuthority extends string
        ? ReadonlyAccount<TAccountNewAuthority>
        : TAccountNewAuthority,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateGlobalAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type UpdateGlobalAuthorityInstructionDataArgs = {};

export function getUpdateGlobalAuthorityInstructionDataEncoder(): FixedSizeEncoder<UpdateGlobalAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: UPDATE_GLOBAL_AUTHORITY_DISCRIMINATOR,
    })
  );
}

export function getUpdateGlobalAuthorityInstructionDataDecoder(): FixedSizeDecoder<UpdateGlobalAuthorityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getUpdateGlobalAuthorityInstructionDataCodec(): FixedSizeCodec<
  UpdateGlobalAuthorityInstructionDataArgs,
  UpdateGlobalAuthorityInstructionData
> {
  return combineCodec(
    getUpdateGlobalAuthorityInstructionDataEncoder(),
    getUpdateGlobalAuthorityInstructionDataDecoder()
  );
}

export type UpdateGlobalAuthorityAsyncInput<
  TAccountGlobal extends string = string,
  TAccountAuthority extends string = string,
  TAccountNewAuthority extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  global?: Address<TAccountGlobal>;
  authority: TransactionSigner<TAccountAuthority>;
  newAuthority: Address<TAccountNewAuthority>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export async function getUpdateGlobalAuthorityInstructionAsync<
  TAccountGlobal extends string,
  TAccountAuthority extends string,
  TAccountNewAuthority extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_PROGRAM_ADDRESS,
>(
  input: UpdateGlobalAuthorityAsyncInput<
    TAccountGlobal,
    TAccountAuthority,
    TAccountNewAuthority,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateGlobalAuthorityInstruction<
    TProgramAddress,
    TAccountGlobal,
    TAccountAuthority,
    TAccountNewAuthority,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    global: { value: input.global ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    newAuthority: { value: input.newAuthority ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.global.value) {
    accounts.global.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([103, 108, 111, 98, 97, 108])),
      ],
    });
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.global),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.newAuthority),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getUpdateGlobalAuthorityInstructionDataEncoder().encode({}),
    programAddress,
  } as UpdateGlobalAuthorityInstruction<
    TProgramAddress,
    TAccountGlobal,
    TAccountAuthority,
    TAccountNewAuthority,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type UpdateGlobalAuthorityInput<
  TAccountGlobal extends string = string,
  TAccountAuthority extends string = string,
  TAccountNewAuthority extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  global: Address<TAccountGlobal>;
  authority: TransactionSigner<TAccountAuthority>;
  newAuthority: Address<TAccountNewAuthority>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export function getUpdateGlobalAuthorityInstruction<
  TAccountGlobal extends string,
  TAccountAuthority extends string,
  TAccountNewAuthority extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_PROGRAM_ADDRESS,
>(
  input: UpdateGlobalAuthorityInput<
    TAccountGlobal,
    TAccountAuthority,
    TAccountNewAuthority,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateGlobalAuthorityInstruction<
  TProgramAddress,
  TAccountGlobal,
  TAccountAuthority,
  TAccountNewAuthority,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    global: { value: input.global ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    newAuthority: { value: input.newAuthority ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.global),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.newAuthority),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getUpdateGlobalAuthorityInstructionDataEncoder().encode({}),
    programAddress,
  } as UpdateGlobalAuthorityInstruction<
    TProgramAddress,
    TAccountGlobal,
    TAccountAuthority,
    TAccountNewAuthority,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedUpdateGlobalAuthorityInstruction<
  TProgram extends string = typeof PUMP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    global: TAccountMetas[0];
    authority: TAccountMetas[1];
    newAuthority: TAccountMetas[2];
    eventAuthority: TAccountMetas[3];
    program: TAccountMetas[4];
  };
  data: UpdateGlobalAuthorityInstructionData;
};

export function parseUpdateGlobalAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateGlobalAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      global: getNextAccount(),
      authority: getNextAccount(),
      newAuthority: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getUpdateGlobalAuthorityInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
