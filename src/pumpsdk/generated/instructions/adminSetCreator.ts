/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { PUMP_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const ADMIN_SET_CREATOR_DISCRIMINATOR = new Uint8Array([
  69, 25, 171, 142, 57, 239, 13, 4,
]);

export function getAdminSetCreatorDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADMIN_SET_CREATOR_DISCRIMINATOR
  );
}

export type AdminSetCreatorInstruction<
  TProgram extends string = typeof PUMP_PROGRAM_ADDRESS,
  TAccountAdminSetCreatorAuthority extends
    | string
    | AccountMeta<string> = string,
  TAccountGlobal extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountBondingCurve extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdminSetCreatorAuthority extends string
        ? ReadonlySignerAccount<TAccountAdminSetCreatorAuthority> &
            AccountSignerMeta<TAccountAdminSetCreatorAuthority>
        : TAccountAdminSetCreatorAuthority,
      TAccountGlobal extends string
        ? ReadonlyAccount<TAccountGlobal>
        : TAccountGlobal,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountBondingCurve extends string
        ? WritableAccount<TAccountBondingCurve>
        : TAccountBondingCurve,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AdminSetCreatorInstructionData = {
  discriminator: ReadonlyUint8Array;
  creator: Address;
};

export type AdminSetCreatorInstructionDataArgs = { creator: Address };

export function getAdminSetCreatorInstructionDataEncoder(): FixedSizeEncoder<AdminSetCreatorInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['creator', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: ADMIN_SET_CREATOR_DISCRIMINATOR })
  );
}

export function getAdminSetCreatorInstructionDataDecoder(): FixedSizeDecoder<AdminSetCreatorInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['creator', getAddressDecoder()],
  ]);
}

export function getAdminSetCreatorInstructionDataCodec(): FixedSizeCodec<
  AdminSetCreatorInstructionDataArgs,
  AdminSetCreatorInstructionData
> {
  return combineCodec(
    getAdminSetCreatorInstructionDataEncoder(),
    getAdminSetCreatorInstructionDataDecoder()
  );
}

export type AdminSetCreatorAsyncInput<
  TAccountAdminSetCreatorAuthority extends string = string,
  TAccountGlobal extends string = string,
  TAccountMint extends string = string,
  TAccountBondingCurve extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  adminSetCreatorAuthority: TransactionSigner<TAccountAdminSetCreatorAuthority>;
  global?: Address<TAccountGlobal>;
  mint: Address<TAccountMint>;
  bondingCurve?: Address<TAccountBondingCurve>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  creator: AdminSetCreatorInstructionDataArgs['creator'];
};

export async function getAdminSetCreatorInstructionAsync<
  TAccountAdminSetCreatorAuthority extends string,
  TAccountGlobal extends string,
  TAccountMint extends string,
  TAccountBondingCurve extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_PROGRAM_ADDRESS,
>(
  input: AdminSetCreatorAsyncInput<
    TAccountAdminSetCreatorAuthority,
    TAccountGlobal,
    TAccountMint,
    TAccountBondingCurve,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  AdminSetCreatorInstruction<
    TProgramAddress,
    TAccountAdminSetCreatorAuthority,
    TAccountGlobal,
    TAccountMint,
    TAccountBondingCurve,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    adminSetCreatorAuthority: {
      value: input.adminSetCreatorAuthority ?? null,
      isWritable: false,
    },
    global: { value: input.global ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    bondingCurve: { value: input.bondingCurve ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.global.value) {
    accounts.global.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([103, 108, 111, 98, 97, 108])),
      ],
    });
  }
  if (!accounts.bondingCurve.value) {
    accounts.bondingCurve.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            98, 111, 110, 100, 105, 110, 103, 45, 99, 117, 114, 118, 101,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.adminSetCreatorAuthority),
      getAccountMeta(accounts.global),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.bondingCurve),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getAdminSetCreatorInstructionDataEncoder().encode(
      args as AdminSetCreatorInstructionDataArgs
    ),
    programAddress,
  } as AdminSetCreatorInstruction<
    TProgramAddress,
    TAccountAdminSetCreatorAuthority,
    TAccountGlobal,
    TAccountMint,
    TAccountBondingCurve,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type AdminSetCreatorInput<
  TAccountAdminSetCreatorAuthority extends string = string,
  TAccountGlobal extends string = string,
  TAccountMint extends string = string,
  TAccountBondingCurve extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  adminSetCreatorAuthority: TransactionSigner<TAccountAdminSetCreatorAuthority>;
  global: Address<TAccountGlobal>;
  mint: Address<TAccountMint>;
  bondingCurve: Address<TAccountBondingCurve>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  creator: AdminSetCreatorInstructionDataArgs['creator'];
};

export function getAdminSetCreatorInstruction<
  TAccountAdminSetCreatorAuthority extends string,
  TAccountGlobal extends string,
  TAccountMint extends string,
  TAccountBondingCurve extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_PROGRAM_ADDRESS,
>(
  input: AdminSetCreatorInput<
    TAccountAdminSetCreatorAuthority,
    TAccountGlobal,
    TAccountMint,
    TAccountBondingCurve,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AdminSetCreatorInstruction<
  TProgramAddress,
  TAccountAdminSetCreatorAuthority,
  TAccountGlobal,
  TAccountMint,
  TAccountBondingCurve,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    adminSetCreatorAuthority: {
      value: input.adminSetCreatorAuthority ?? null,
      isWritable: false,
    },
    global: { value: input.global ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    bondingCurve: { value: input.bondingCurve ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.adminSetCreatorAuthority),
      getAccountMeta(accounts.global),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.bondingCurve),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getAdminSetCreatorInstructionDataEncoder().encode(
      args as AdminSetCreatorInstructionDataArgs
    ),
    programAddress,
  } as AdminSetCreatorInstruction<
    TProgramAddress,
    TAccountAdminSetCreatorAuthority,
    TAccountGlobal,
    TAccountMint,
    TAccountBondingCurve,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedAdminSetCreatorInstruction<
  TProgram extends string = typeof PUMP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    adminSetCreatorAuthority: TAccountMetas[0];
    global: TAccountMetas[1];
    mint: TAccountMetas[2];
    bondingCurve: TAccountMetas[3];
    eventAuthority: TAccountMetas[4];
    program: TAccountMetas[5];
  };
  data: AdminSetCreatorInstructionData;
};

export function parseAdminSetCreatorInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAdminSetCreatorInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      adminSetCreatorAuthority: getNextAccount(),
      global: getNextAccount(),
      mint: getNextAccount(),
      bondingCurve: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getAdminSetCreatorInstructionDataDecoder().decode(instruction.data),
  };
}
