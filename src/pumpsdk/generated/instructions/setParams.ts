/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PUMP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_PARAMS_DISCRIMINATOR = new Uint8Array([
  27, 234, 178, 52, 147, 2, 187, 141,
]);

export function getSetParamsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SET_PARAMS_DISCRIMINATOR);
}

export type SetParamsInstruction<
  TProgram extends string = typeof PUMP_PROGRAM_ADDRESS,
  TAccountGlobal extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGlobal extends string
        ? WritableAccount<TAccountGlobal>
        : TAccountGlobal,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SetParamsInstructionData = {
  discriminator: ReadonlyUint8Array;
  initialVirtualTokenReserves: bigint;
  initialVirtualSolReserves: bigint;
  initialRealTokenReserves: bigint;
  tokenTotalSupply: bigint;
  feeBasisPoints: bigint;
  withdrawAuthority: Address;
  enableMigrate: boolean;
  poolMigrationFee: bigint;
  creatorFeeBasisPoints: bigint;
  setCreatorAuthority: Address;
  adminSetCreatorAuthority: Address;
};

export type SetParamsInstructionDataArgs = {
  initialVirtualTokenReserves: number | bigint;
  initialVirtualSolReserves: number | bigint;
  initialRealTokenReserves: number | bigint;
  tokenTotalSupply: number | bigint;
  feeBasisPoints: number | bigint;
  withdrawAuthority: Address;
  enableMigrate: boolean;
  poolMigrationFee: number | bigint;
  creatorFeeBasisPoints: number | bigint;
  setCreatorAuthority: Address;
  adminSetCreatorAuthority: Address;
};

export function getSetParamsInstructionDataEncoder(): FixedSizeEncoder<SetParamsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['initialVirtualTokenReserves', getU64Encoder()],
      ['initialVirtualSolReserves', getU64Encoder()],
      ['initialRealTokenReserves', getU64Encoder()],
      ['tokenTotalSupply', getU64Encoder()],
      ['feeBasisPoints', getU64Encoder()],
      ['withdrawAuthority', getAddressEncoder()],
      ['enableMigrate', getBooleanEncoder()],
      ['poolMigrationFee', getU64Encoder()],
      ['creatorFeeBasisPoints', getU64Encoder()],
      ['setCreatorAuthority', getAddressEncoder()],
      ['adminSetCreatorAuthority', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_PARAMS_DISCRIMINATOR })
  );
}

export function getSetParamsInstructionDataDecoder(): FixedSizeDecoder<SetParamsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['initialVirtualTokenReserves', getU64Decoder()],
    ['initialVirtualSolReserves', getU64Decoder()],
    ['initialRealTokenReserves', getU64Decoder()],
    ['tokenTotalSupply', getU64Decoder()],
    ['feeBasisPoints', getU64Decoder()],
    ['withdrawAuthority', getAddressDecoder()],
    ['enableMigrate', getBooleanDecoder()],
    ['poolMigrationFee', getU64Decoder()],
    ['creatorFeeBasisPoints', getU64Decoder()],
    ['setCreatorAuthority', getAddressDecoder()],
    ['adminSetCreatorAuthority', getAddressDecoder()],
  ]);
}

export function getSetParamsInstructionDataCodec(): FixedSizeCodec<
  SetParamsInstructionDataArgs,
  SetParamsInstructionData
> {
  return combineCodec(
    getSetParamsInstructionDataEncoder(),
    getSetParamsInstructionDataDecoder()
  );
}

export type SetParamsAsyncInput<
  TAccountGlobal extends string = string,
  TAccountAuthority extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  global?: Address<TAccountGlobal>;
  authority: TransactionSigner<TAccountAuthority>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  initialVirtualTokenReserves: SetParamsInstructionDataArgs['initialVirtualTokenReserves'];
  initialVirtualSolReserves: SetParamsInstructionDataArgs['initialVirtualSolReserves'];
  initialRealTokenReserves: SetParamsInstructionDataArgs['initialRealTokenReserves'];
  tokenTotalSupply: SetParamsInstructionDataArgs['tokenTotalSupply'];
  feeBasisPoints: SetParamsInstructionDataArgs['feeBasisPoints'];
  withdrawAuthority: SetParamsInstructionDataArgs['withdrawAuthority'];
  enableMigrate: SetParamsInstructionDataArgs['enableMigrate'];
  poolMigrationFee: SetParamsInstructionDataArgs['poolMigrationFee'];
  creatorFeeBasisPoints: SetParamsInstructionDataArgs['creatorFeeBasisPoints'];
  setCreatorAuthority: SetParamsInstructionDataArgs['setCreatorAuthority'];
  adminSetCreatorAuthority: SetParamsInstructionDataArgs['adminSetCreatorAuthority'];
};

export async function getSetParamsInstructionAsync<
  TAccountGlobal extends string,
  TAccountAuthority extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_PROGRAM_ADDRESS,
>(
  input: SetParamsAsyncInput<
    TAccountGlobal,
    TAccountAuthority,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SetParamsInstruction<
    TProgramAddress,
    TAccountGlobal,
    TAccountAuthority,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    global: { value: input.global ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.global.value) {
    accounts.global.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([103, 108, 111, 98, 97, 108])),
      ],
    });
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.global),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getSetParamsInstructionDataEncoder().encode(
      args as SetParamsInstructionDataArgs
    ),
    programAddress,
  } as SetParamsInstruction<
    TProgramAddress,
    TAccountGlobal,
    TAccountAuthority,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type SetParamsInput<
  TAccountGlobal extends string = string,
  TAccountAuthority extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  global: Address<TAccountGlobal>;
  authority: TransactionSigner<TAccountAuthority>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  initialVirtualTokenReserves: SetParamsInstructionDataArgs['initialVirtualTokenReserves'];
  initialVirtualSolReserves: SetParamsInstructionDataArgs['initialVirtualSolReserves'];
  initialRealTokenReserves: SetParamsInstructionDataArgs['initialRealTokenReserves'];
  tokenTotalSupply: SetParamsInstructionDataArgs['tokenTotalSupply'];
  feeBasisPoints: SetParamsInstructionDataArgs['feeBasisPoints'];
  withdrawAuthority: SetParamsInstructionDataArgs['withdrawAuthority'];
  enableMigrate: SetParamsInstructionDataArgs['enableMigrate'];
  poolMigrationFee: SetParamsInstructionDataArgs['poolMigrationFee'];
  creatorFeeBasisPoints: SetParamsInstructionDataArgs['creatorFeeBasisPoints'];
  setCreatorAuthority: SetParamsInstructionDataArgs['setCreatorAuthority'];
  adminSetCreatorAuthority: SetParamsInstructionDataArgs['adminSetCreatorAuthority'];
};

export function getSetParamsInstruction<
  TAccountGlobal extends string,
  TAccountAuthority extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_PROGRAM_ADDRESS,
>(
  input: SetParamsInput<
    TAccountGlobal,
    TAccountAuthority,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SetParamsInstruction<
  TProgramAddress,
  TAccountGlobal,
  TAccountAuthority,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    global: { value: input.global ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.global),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getSetParamsInstructionDataEncoder().encode(
      args as SetParamsInstructionDataArgs
    ),
    programAddress,
  } as SetParamsInstruction<
    TProgramAddress,
    TAccountGlobal,
    TAccountAuthority,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedSetParamsInstruction<
  TProgram extends string = typeof PUMP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    global: TAccountMetas[0];
    authority: TAccountMetas[1];
    eventAuthority: TAccountMetas[2];
    program: TAccountMetas[3];
  };
  data: SetParamsInstructionData;
};

export function parseSetParamsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetParamsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      global: getNextAccount(),
      authority: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getSetParamsInstructionDataDecoder().decode(instruction.data),
  };
}
