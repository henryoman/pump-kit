/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const USER_VOLUME_ACCUMULATOR_DISCRIMINATOR = new Uint8Array([
  86, 255, 112, 14, 102, 53, 154, 250,
]);

export function getUserVolumeAccumulatorDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    USER_VOLUME_ACCUMULATOR_DISCRIMINATOR
  );
}

export type UserVolumeAccumulator = {
  discriminator: ReadonlyUint8Array;
  user: Address;
  needsClaim: boolean;
  totalUnclaimedTokens: bigint;
  totalClaimedTokens: bigint;
  currentSolVolume: bigint;
  lastUpdateTimestamp: bigint;
  hasTotalClaimedTokens: boolean;
};

export type UserVolumeAccumulatorArgs = {
  user: Address;
  needsClaim: boolean;
  totalUnclaimedTokens: number | bigint;
  totalClaimedTokens: number | bigint;
  currentSolVolume: number | bigint;
  lastUpdateTimestamp: number | bigint;
  hasTotalClaimedTokens: boolean;
};

export function getUserVolumeAccumulatorEncoder(): FixedSizeEncoder<UserVolumeAccumulatorArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['user', getAddressEncoder()],
      ['needsClaim', getBooleanEncoder()],
      ['totalUnclaimedTokens', getU64Encoder()],
      ['totalClaimedTokens', getU64Encoder()],
      ['currentSolVolume', getU64Encoder()],
      ['lastUpdateTimestamp', getI64Encoder()],
      ['hasTotalClaimedTokens', getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: USER_VOLUME_ACCUMULATOR_DISCRIMINATOR,
    })
  );
}

export function getUserVolumeAccumulatorDecoder(): FixedSizeDecoder<UserVolumeAccumulator> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['user', getAddressDecoder()],
    ['needsClaim', getBooleanDecoder()],
    ['totalUnclaimedTokens', getU64Decoder()],
    ['totalClaimedTokens', getU64Decoder()],
    ['currentSolVolume', getU64Decoder()],
    ['lastUpdateTimestamp', getI64Decoder()],
    ['hasTotalClaimedTokens', getBooleanDecoder()],
  ]);
}

export function getUserVolumeAccumulatorCodec(): FixedSizeCodec<
  UserVolumeAccumulatorArgs,
  UserVolumeAccumulator
> {
  return combineCodec(
    getUserVolumeAccumulatorEncoder(),
    getUserVolumeAccumulatorDecoder()
  );
}

export function decodeUserVolumeAccumulator<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UserVolumeAccumulator, TAddress>;
export function decodeUserVolumeAccumulator<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UserVolumeAccumulator, TAddress>;
export function decodeUserVolumeAccumulator<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<UserVolumeAccumulator, TAddress>
  | MaybeAccount<UserVolumeAccumulator, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserVolumeAccumulatorDecoder()
  );
}

export async function fetchUserVolumeAccumulator<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UserVolumeAccumulator, TAddress>> {
  const maybeAccount = await fetchMaybeUserVolumeAccumulator(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUserVolumeAccumulator<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UserVolumeAccumulator, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUserVolumeAccumulator(maybeAccount);
}

export async function fetchAllUserVolumeAccumulator(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UserVolumeAccumulator>[]> {
  const maybeAccounts = await fetchAllMaybeUserVolumeAccumulator(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUserVolumeAccumulator(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UserVolumeAccumulator>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeUserVolumeAccumulator(maybeAccount)
  );
}

export function getUserVolumeAccumulatorSize(): number {
  return 74;
}
