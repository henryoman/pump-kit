/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const GLOBAL_VOLUME_ACCUMULATOR_DISCRIMINATOR = new Uint8Array([
  202, 42, 246, 43, 142, 190, 30, 255,
]);

export function getGlobalVolumeAccumulatorDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GLOBAL_VOLUME_ACCUMULATOR_DISCRIMINATOR
  );
}

export type GlobalVolumeAccumulator = {
  discriminator: ReadonlyUint8Array;
  startTime: bigint;
  endTime: bigint;
  secondsInADay: bigint;
  mint: Address;
  totalTokenSupply: Array<bigint>;
  solVolumes: Array<bigint>;
};

export type GlobalVolumeAccumulatorArgs = {
  startTime: number | bigint;
  endTime: number | bigint;
  secondsInADay: number | bigint;
  mint: Address;
  totalTokenSupply: Array<number | bigint>;
  solVolumes: Array<number | bigint>;
};

export function getGlobalVolumeAccumulatorEncoder(): FixedSizeEncoder<GlobalVolumeAccumulatorArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['startTime', getI64Encoder()],
      ['endTime', getI64Encoder()],
      ['secondsInADay', getI64Encoder()],
      ['mint', getAddressEncoder()],
      ['totalTokenSupply', getArrayEncoder(getU64Encoder(), { size: 30 })],
      ['solVolumes', getArrayEncoder(getU64Encoder(), { size: 30 })],
    ]),
    (value) => ({
      ...value,
      discriminator: GLOBAL_VOLUME_ACCUMULATOR_DISCRIMINATOR,
    })
  );
}

export function getGlobalVolumeAccumulatorDecoder(): FixedSizeDecoder<GlobalVolumeAccumulator> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['startTime', getI64Decoder()],
    ['endTime', getI64Decoder()],
    ['secondsInADay', getI64Decoder()],
    ['mint', getAddressDecoder()],
    ['totalTokenSupply', getArrayDecoder(getU64Decoder(), { size: 30 })],
    ['solVolumes', getArrayDecoder(getU64Decoder(), { size: 30 })],
  ]);
}

export function getGlobalVolumeAccumulatorCodec(): FixedSizeCodec<
  GlobalVolumeAccumulatorArgs,
  GlobalVolumeAccumulator
> {
  return combineCodec(
    getGlobalVolumeAccumulatorEncoder(),
    getGlobalVolumeAccumulatorDecoder()
  );
}

export function decodeGlobalVolumeAccumulator<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<GlobalVolumeAccumulator, TAddress>;
export function decodeGlobalVolumeAccumulator<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<GlobalVolumeAccumulator, TAddress>;
export function decodeGlobalVolumeAccumulator<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<GlobalVolumeAccumulator, TAddress>
  | MaybeAccount<GlobalVolumeAccumulator, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getGlobalVolumeAccumulatorDecoder()
  );
}

export async function fetchGlobalVolumeAccumulator<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<GlobalVolumeAccumulator, TAddress>> {
  const maybeAccount = await fetchMaybeGlobalVolumeAccumulator(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeGlobalVolumeAccumulator<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<GlobalVolumeAccumulator, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeGlobalVolumeAccumulator(maybeAccount);
}

export async function fetchAllGlobalVolumeAccumulator(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<GlobalVolumeAccumulator>[]> {
  const maybeAccounts = await fetchAllMaybeGlobalVolumeAccumulator(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeGlobalVolumeAccumulator(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<GlobalVolumeAccumulator>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeGlobalVolumeAccumulator(maybeAccount)
  );
}

export function getGlobalVolumeAccumulatorSize(): number {
  return 544;
}
