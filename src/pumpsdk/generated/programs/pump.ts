/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAdminSetCreatorInstruction,
  type ParsedAdminSetIdlAuthorityInstruction,
  type ParsedAdminUpdateTokenIncentivesInstruction,
  type ParsedBuyExactSolInInstruction,
  type ParsedBuyInstruction,
  type ParsedClaimTokenIncentivesInstruction,
  type ParsedCloseUserVolumeAccumulatorInstruction,
  type ParsedCollectCreatorFeeInstruction,
  type ParsedCreateInstruction,
  type ParsedExtendAccountInstruction,
  type ParsedInitializeInstruction,
  type ParsedInitUserVolumeAccumulatorInstruction,
  type ParsedMigrateInstruction,
  type ParsedSellInstruction,
  type ParsedSetCreatorInstruction,
  type ParsedSetMetaplexCreatorInstruction,
  type ParsedSetParamsInstruction,
  type ParsedSyncUserVolumeAccumulatorInstruction,
  type ParsedUpdateGlobalAuthorityInstruction,
} from '../instructions';

export const PUMP_PROGRAM_ADDRESS =
  '6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P' as Address<'6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P'>;

export enum PumpAccount {
  BondingCurve,
  FeeConfig,
  Global,
  GlobalVolumeAccumulator,
  UserVolumeAccumulator,
}

export function identifyPumpAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PumpAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([23, 183, 248, 55, 96, 216, 172, 96])
      ),
      0
    )
  ) {
    return PumpAccount.BondingCurve;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([143, 52, 146, 187, 219, 123, 76, 155])
      ),
      0
    )
  ) {
    return PumpAccount.FeeConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([167, 232, 232, 177, 200, 108, 114, 127])
      ),
      0
    )
  ) {
    return PumpAccount.Global;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([202, 42, 246, 43, 142, 190, 30, 255])
      ),
      0
    )
  ) {
    return PumpAccount.GlobalVolumeAccumulator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([86, 255, 112, 14, 102, 53, 154, 250])
      ),
      0
    )
  ) {
    return PumpAccount.UserVolumeAccumulator;
  }
  throw new Error(
    'The provided account could not be identified as a pump account.'
  );
}

export enum PumpInstruction {
  AdminSetCreator,
  AdminSetIdlAuthority,
  AdminUpdateTokenIncentives,
  Buy,
  BuyExactSolIn,
  ClaimTokenIncentives,
  CloseUserVolumeAccumulator,
  CollectCreatorFee,
  Create,
  ExtendAccount,
  InitUserVolumeAccumulator,
  Initialize,
  Migrate,
  Sell,
  SetCreator,
  SetMetaplexCreator,
  SetParams,
  SyncUserVolumeAccumulator,
  UpdateGlobalAuthority,
}

export function identifyPumpInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PumpInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([69, 25, 171, 142, 57, 239, 13, 4])
      ),
      0
    )
  ) {
    return PumpInstruction.AdminSetCreator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([8, 217, 96, 231, 144, 104, 192, 5])
      ),
      0
    )
  ) {
    return PumpInstruction.AdminSetIdlAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([209, 11, 115, 87, 213, 23, 124, 204])
      ),
      0
    )
  ) {
    return PumpInstruction.AdminUpdateTokenIncentives;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([102, 6, 61, 18, 1, 218, 235, 234])
      ),
      0
    )
  ) {
    return PumpInstruction.Buy;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([56, 252, 116, 8, 158, 223, 205, 95])
      ),
      0
    )
  ) {
    return PumpInstruction.BuyExactSolIn;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([16, 4, 71, 28, 204, 1, 40, 27])
      ),
      0
    )
  ) {
    return PumpInstruction.ClaimTokenIncentives;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([249, 69, 164, 218, 150, 103, 84, 138])
      ),
      0
    )
  ) {
    return PumpInstruction.CloseUserVolumeAccumulator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([20, 22, 86, 123, 198, 28, 219, 132])
      ),
      0
    )
  ) {
    return PumpInstruction.CollectCreatorFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([24, 30, 200, 40, 5, 28, 7, 119])
      ),
      0
    )
  ) {
    return PumpInstruction.Create;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([234, 102, 194, 203, 150, 72, 62, 229])
      ),
      0
    )
  ) {
    return PumpInstruction.ExtendAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([94, 6, 202, 115, 255, 96, 232, 183])
      ),
      0
    )
  ) {
    return PumpInstruction.InitUserVolumeAccumulator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return PumpInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([155, 234, 231, 146, 236, 158, 162, 30])
      ),
      0
    )
  ) {
    return PumpInstruction.Migrate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([51, 230, 133, 164, 1, 127, 131, 173])
      ),
      0
    )
  ) {
    return PumpInstruction.Sell;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([254, 148, 255, 112, 207, 142, 170, 165])
      ),
      0
    )
  ) {
    return PumpInstruction.SetCreator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([138, 96, 174, 217, 48, 85, 197, 246])
      ),
      0
    )
  ) {
    return PumpInstruction.SetMetaplexCreator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([27, 234, 178, 52, 147, 2, 187, 141])
      ),
      0
    )
  ) {
    return PumpInstruction.SetParams;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([86, 31, 192, 87, 163, 87, 79, 238])
      ),
      0
    )
  ) {
    return PumpInstruction.SyncUserVolumeAccumulator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([227, 181, 74, 196, 208, 21, 97, 213])
      ),
      0
    )
  ) {
    return PumpInstruction.UpdateGlobalAuthority;
  }
  throw new Error(
    'The provided instruction could not be identified as a pump instruction.'
  );
}

export type ParsedPumpInstruction<
  TProgram extends string = '6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P',
> =
  | ({
      instructionType: PumpInstruction.AdminSetCreator;
    } & ParsedAdminSetCreatorInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.AdminSetIdlAuthority;
    } & ParsedAdminSetIdlAuthorityInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.AdminUpdateTokenIncentives;
    } & ParsedAdminUpdateTokenIncentivesInstruction<TProgram>)
  | ({ instructionType: PumpInstruction.Buy } & ParsedBuyInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.BuyExactSolIn;
    } & ParsedBuyExactSolInInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.ClaimTokenIncentives;
    } & ParsedClaimTokenIncentivesInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.CloseUserVolumeAccumulator;
    } & ParsedCloseUserVolumeAccumulatorInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.CollectCreatorFee;
    } & ParsedCollectCreatorFeeInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.Create;
    } & ParsedCreateInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.ExtendAccount;
    } & ParsedExtendAccountInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.InitUserVolumeAccumulator;
    } & ParsedInitUserVolumeAccumulatorInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.Migrate;
    } & ParsedMigrateInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.Sell;
    } & ParsedSellInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.SetCreator;
    } & ParsedSetCreatorInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.SetMetaplexCreator;
    } & ParsedSetMetaplexCreatorInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.SetParams;
    } & ParsedSetParamsInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.SyncUserVolumeAccumulator;
    } & ParsedSyncUserVolumeAccumulatorInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.UpdateGlobalAuthority;
    } & ParsedUpdateGlobalAuthorityInstruction<TProgram>);
