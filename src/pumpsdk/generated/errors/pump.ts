/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { PUMP_PROGRAM_ADDRESS } from '../programs';

/** NotAuthorized: The given account is not authorized to execute this instruction. */
export const PUMP_ERROR__NOT_AUTHORIZED = 0x1770; // 6000
/** AlreadyInitialized: The program is already initialized. */
export const PUMP_ERROR__ALREADY_INITIALIZED = 0x1771; // 6001
/** TooMuchSolRequired: slippage: Too much SOL required to buy the given amount of tokens. */
export const PUMP_ERROR__TOO_MUCH_SOL_REQUIRED = 0x1772; // 6002
/** TooLittleSolReceived: slippage: Too little SOL received to sell the given amount of tokens. */
export const PUMP_ERROR__TOO_LITTLE_SOL_RECEIVED = 0x1773; // 6003
/** MintDoesNotMatchBondingCurve: The mint does not match the bonding curve. */
export const PUMP_ERROR__MINT_DOES_NOT_MATCH_BONDING_CURVE = 0x1774; // 6004
/** BondingCurveComplete: The bonding curve has completed and liquidity migrated to raydium. */
export const PUMP_ERROR__BONDING_CURVE_COMPLETE = 0x1775; // 6005
/** BondingCurveNotComplete: The bonding curve has not completed. */
export const PUMP_ERROR__BONDING_CURVE_NOT_COMPLETE = 0x1776; // 6006
/** NotInitialized: The program is not initialized. */
export const PUMP_ERROR__NOT_INITIALIZED = 0x1777; // 6007
/** WithdrawTooFrequent: Withdraw too frequent */
export const PUMP_ERROR__WITHDRAW_TOO_FREQUENT = 0x1778; // 6008
/** NewSizeShouldBeGreaterThanCurrentSize: new_size should be > current_size */
export const PUMP_ERROR__NEW_SIZE_SHOULD_BE_GREATER_THAN_CURRENT_SIZE = 0x1779; // 6009
/** AccountTypeNotSupported: Account type not supported */
export const PUMP_ERROR__ACCOUNT_TYPE_NOT_SUPPORTED = 0x177a; // 6010
/** InitialRealTokenReservesShouldBeLessThanTokenTotalSupply: initial_real_token_reserves should be less than token_total_supply */
export const PUMP_ERROR__INITIAL_REAL_TOKEN_RESERVES_SHOULD_BE_LESS_THAN_TOKEN_TOTAL_SUPPLY = 0x177b; // 6011
/** InitialVirtualTokenReservesShouldBeGreaterThanInitialRealTokenReserves: initial_virtual_token_reserves should be greater than initial_real_token_reserves */
export const PUMP_ERROR__INITIAL_VIRTUAL_TOKEN_RESERVES_SHOULD_BE_GREATER_THAN_INITIAL_REAL_TOKEN_RESERVES = 0x177c; // 6012
/** FeeBasisPointsGreaterThanMaximum: fee_basis_points greater than maximum */
export const PUMP_ERROR__FEE_BASIS_POINTS_GREATER_THAN_MAXIMUM = 0x177d; // 6013
/** AllZerosWithdrawAuthority: Withdraw authority cannot be set to System Program ID */
export const PUMP_ERROR__ALL_ZEROS_WITHDRAW_AUTHORITY = 0x177e; // 6014
/** PoolMigrationFeeShouldBeLessThanFinalRealSolReserves: pool_migration_fee should be less than final_real_sol_reserves */
export const PUMP_ERROR__POOL_MIGRATION_FEE_SHOULD_BE_LESS_THAN_FINAL_REAL_SOL_RESERVES = 0x177f; // 6015
/** PoolMigrationFeeShouldBeGreaterThanCreatorFeePlusMaxMigrateFees: pool_migration_fee should be greater than creator_fee + MAX_MIGRATE_FEES */
export const PUMP_ERROR__POOL_MIGRATION_FEE_SHOULD_BE_GREATER_THAN_CREATOR_FEE_PLUS_MAX_MIGRATE_FEES = 0x1780; // 6016
/** DisabledWithdraw: Migrate instruction is disabled */
export const PUMP_ERROR__DISABLED_WITHDRAW = 0x1781; // 6017
/** DisabledMigrate: Migrate instruction is disabled */
export const PUMP_ERROR__DISABLED_MIGRATE = 0x1782; // 6018
/** InvalidCreator: Invalid creator pubkey */
export const PUMP_ERROR__INVALID_CREATOR = 0x1783; // 6019
/** BuyZeroAmount: Buy zero amount */
export const PUMP_ERROR__BUY_ZERO_AMOUNT = 0x1784; // 6020
/** NotEnoughTokensToBuy: Not enough tokens to buy */
export const PUMP_ERROR__NOT_ENOUGH_TOKENS_TO_BUY = 0x1785; // 6021
/** SellZeroAmount: Sell zero amount */
export const PUMP_ERROR__SELL_ZERO_AMOUNT = 0x1786; // 6022
/** NotEnoughTokensToSell: Not enough tokens to sell */
export const PUMP_ERROR__NOT_ENOUGH_TOKENS_TO_SELL = 0x1787; // 6023
/** Overflow: Overflow */
export const PUMP_ERROR__OVERFLOW = 0x1788; // 6024
/** Truncation: Truncation */
export const PUMP_ERROR__TRUNCATION = 0x1789; // 6025
/** DivisionByZero: Division by zero */
export const PUMP_ERROR__DIVISION_BY_ZERO = 0x178a; // 6026
/** NotEnoughRemainingAccounts: Not enough remaining accounts */
export const PUMP_ERROR__NOT_ENOUGH_REMAINING_ACCOUNTS = 0x178b; // 6027
/** AllFeeRecipientsShouldBeNonZero: All fee recipients should be non-zero */
export const PUMP_ERROR__ALL_FEE_RECIPIENTS_SHOULD_BE_NON_ZERO = 0x178c; // 6028
/** UnsortedNotUniqueFeeRecipients: Unsorted or not unique fee recipients */
export const PUMP_ERROR__UNSORTED_NOT_UNIQUE_FEE_RECIPIENTS = 0x178d; // 6029
/** CreatorShouldNotBeZero: Creator should not be zero */
export const PUMP_ERROR__CREATOR_SHOULD_NOT_BE_ZERO = 0x178e; // 6030
/** StartTimeInThePast:  */
export const PUMP_ERROR__START_TIME_IN_THE_PAST = 0x178f; // 6031
/** EndTimeInThePast:  */
export const PUMP_ERROR__END_TIME_IN_THE_PAST = 0x1790; // 6032
/** EndTimeBeforeStartTime:  */
export const PUMP_ERROR__END_TIME_BEFORE_START_TIME = 0x1791; // 6033
/** TimeRangeTooLarge:  */
export const PUMP_ERROR__TIME_RANGE_TOO_LARGE = 0x1792; // 6034
/** EndTimeBeforeCurrentDay:  */
export const PUMP_ERROR__END_TIME_BEFORE_CURRENT_DAY = 0x1793; // 6035
/** SupplyUpdateForFinishedRange:  */
export const PUMP_ERROR__SUPPLY_UPDATE_FOR_FINISHED_RANGE = 0x1794; // 6036
/** DayIndexAfterEndIndex:  */
export const PUMP_ERROR__DAY_INDEX_AFTER_END_INDEX = 0x1795; // 6037
/** DayInActiveRange:  */
export const PUMP_ERROR__DAY_IN_ACTIVE_RANGE = 0x1796; // 6038
/** InvalidIncentiveMint:  */
export const PUMP_ERROR__INVALID_INCENTIVE_MINT = 0x1797; // 6039

export type PumpError =
  | typeof PUMP_ERROR__ACCOUNT_TYPE_NOT_SUPPORTED
  | typeof PUMP_ERROR__ALL_FEE_RECIPIENTS_SHOULD_BE_NON_ZERO
  | typeof PUMP_ERROR__ALL_ZEROS_WITHDRAW_AUTHORITY
  | typeof PUMP_ERROR__ALREADY_INITIALIZED
  | typeof PUMP_ERROR__BONDING_CURVE_COMPLETE
  | typeof PUMP_ERROR__BONDING_CURVE_NOT_COMPLETE
  | typeof PUMP_ERROR__BUY_ZERO_AMOUNT
  | typeof PUMP_ERROR__CREATOR_SHOULD_NOT_BE_ZERO
  | typeof PUMP_ERROR__DAY_IN_ACTIVE_RANGE
  | typeof PUMP_ERROR__DAY_INDEX_AFTER_END_INDEX
  | typeof PUMP_ERROR__DISABLED_MIGRATE
  | typeof PUMP_ERROR__DISABLED_WITHDRAW
  | typeof PUMP_ERROR__DIVISION_BY_ZERO
  | typeof PUMP_ERROR__END_TIME_BEFORE_CURRENT_DAY
  | typeof PUMP_ERROR__END_TIME_BEFORE_START_TIME
  | typeof PUMP_ERROR__END_TIME_IN_THE_PAST
  | typeof PUMP_ERROR__FEE_BASIS_POINTS_GREATER_THAN_MAXIMUM
  | typeof PUMP_ERROR__INITIAL_REAL_TOKEN_RESERVES_SHOULD_BE_LESS_THAN_TOKEN_TOTAL_SUPPLY
  | typeof PUMP_ERROR__INITIAL_VIRTUAL_TOKEN_RESERVES_SHOULD_BE_GREATER_THAN_INITIAL_REAL_TOKEN_RESERVES
  | typeof PUMP_ERROR__INVALID_CREATOR
  | typeof PUMP_ERROR__INVALID_INCENTIVE_MINT
  | typeof PUMP_ERROR__MINT_DOES_NOT_MATCH_BONDING_CURVE
  | typeof PUMP_ERROR__NEW_SIZE_SHOULD_BE_GREATER_THAN_CURRENT_SIZE
  | typeof PUMP_ERROR__NOT_AUTHORIZED
  | typeof PUMP_ERROR__NOT_ENOUGH_REMAINING_ACCOUNTS
  | typeof PUMP_ERROR__NOT_ENOUGH_TOKENS_TO_BUY
  | typeof PUMP_ERROR__NOT_ENOUGH_TOKENS_TO_SELL
  | typeof PUMP_ERROR__NOT_INITIALIZED
  | typeof PUMP_ERROR__OVERFLOW
  | typeof PUMP_ERROR__POOL_MIGRATION_FEE_SHOULD_BE_GREATER_THAN_CREATOR_FEE_PLUS_MAX_MIGRATE_FEES
  | typeof PUMP_ERROR__POOL_MIGRATION_FEE_SHOULD_BE_LESS_THAN_FINAL_REAL_SOL_RESERVES
  | typeof PUMP_ERROR__SELL_ZERO_AMOUNT
  | typeof PUMP_ERROR__START_TIME_IN_THE_PAST
  | typeof PUMP_ERROR__SUPPLY_UPDATE_FOR_FINISHED_RANGE
  | typeof PUMP_ERROR__TIME_RANGE_TOO_LARGE
  | typeof PUMP_ERROR__TOO_LITTLE_SOL_RECEIVED
  | typeof PUMP_ERROR__TOO_MUCH_SOL_REQUIRED
  | typeof PUMP_ERROR__TRUNCATION
  | typeof PUMP_ERROR__UNSORTED_NOT_UNIQUE_FEE_RECIPIENTS
  | typeof PUMP_ERROR__WITHDRAW_TOO_FREQUENT;

let pumpErrorMessages: Record<PumpError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  pumpErrorMessages = {
    [PUMP_ERROR__ACCOUNT_TYPE_NOT_SUPPORTED]: `Account type not supported`,
    [PUMP_ERROR__ALL_FEE_RECIPIENTS_SHOULD_BE_NON_ZERO]: `All fee recipients should be non-zero`,
    [PUMP_ERROR__ALL_ZEROS_WITHDRAW_AUTHORITY]: `Withdraw authority cannot be set to System Program ID`,
    [PUMP_ERROR__ALREADY_INITIALIZED]: `The program is already initialized.`,
    [PUMP_ERROR__BONDING_CURVE_COMPLETE]: `The bonding curve has completed and liquidity migrated to raydium.`,
    [PUMP_ERROR__BONDING_CURVE_NOT_COMPLETE]: `The bonding curve has not completed.`,
    [PUMP_ERROR__BUY_ZERO_AMOUNT]: `Buy zero amount`,
    [PUMP_ERROR__CREATOR_SHOULD_NOT_BE_ZERO]: `Creator should not be zero`,
    [PUMP_ERROR__DAY_IN_ACTIVE_RANGE]: ``,
    [PUMP_ERROR__DAY_INDEX_AFTER_END_INDEX]: ``,
    [PUMP_ERROR__DISABLED_MIGRATE]: `Migrate instruction is disabled`,
    [PUMP_ERROR__DISABLED_WITHDRAW]: `Migrate instruction is disabled`,
    [PUMP_ERROR__DIVISION_BY_ZERO]: `Division by zero`,
    [PUMP_ERROR__END_TIME_BEFORE_CURRENT_DAY]: ``,
    [PUMP_ERROR__END_TIME_BEFORE_START_TIME]: ``,
    [PUMP_ERROR__END_TIME_IN_THE_PAST]: ``,
    [PUMP_ERROR__FEE_BASIS_POINTS_GREATER_THAN_MAXIMUM]: `fee_basis_points greater than maximum`,
    [PUMP_ERROR__INITIAL_REAL_TOKEN_RESERVES_SHOULD_BE_LESS_THAN_TOKEN_TOTAL_SUPPLY]: `initial_real_token_reserves should be less than token_total_supply`,
    [PUMP_ERROR__INITIAL_VIRTUAL_TOKEN_RESERVES_SHOULD_BE_GREATER_THAN_INITIAL_REAL_TOKEN_RESERVES]: `initial_virtual_token_reserves should be greater than initial_real_token_reserves`,
    [PUMP_ERROR__INVALID_CREATOR]: `Invalid creator pubkey`,
    [PUMP_ERROR__INVALID_INCENTIVE_MINT]: ``,
    [PUMP_ERROR__MINT_DOES_NOT_MATCH_BONDING_CURVE]: `The mint does not match the bonding curve.`,
    [PUMP_ERROR__NEW_SIZE_SHOULD_BE_GREATER_THAN_CURRENT_SIZE]: `new_size should be > current_size`,
    [PUMP_ERROR__NOT_AUTHORIZED]: `The given account is not authorized to execute this instruction.`,
    [PUMP_ERROR__NOT_ENOUGH_REMAINING_ACCOUNTS]: `Not enough remaining accounts`,
    [PUMP_ERROR__NOT_ENOUGH_TOKENS_TO_BUY]: `Not enough tokens to buy`,
    [PUMP_ERROR__NOT_ENOUGH_TOKENS_TO_SELL]: `Not enough tokens to sell`,
    [PUMP_ERROR__NOT_INITIALIZED]: `The program is not initialized.`,
    [PUMP_ERROR__OVERFLOW]: `Overflow`,
    [PUMP_ERROR__POOL_MIGRATION_FEE_SHOULD_BE_GREATER_THAN_CREATOR_FEE_PLUS_MAX_MIGRATE_FEES]: `pool_migration_fee should be greater than creator_fee + MAX_MIGRATE_FEES`,
    [PUMP_ERROR__POOL_MIGRATION_FEE_SHOULD_BE_LESS_THAN_FINAL_REAL_SOL_RESERVES]: `pool_migration_fee should be less than final_real_sol_reserves`,
    [PUMP_ERROR__SELL_ZERO_AMOUNT]: `Sell zero amount`,
    [PUMP_ERROR__START_TIME_IN_THE_PAST]: ``,
    [PUMP_ERROR__SUPPLY_UPDATE_FOR_FINISHED_RANGE]: ``,
    [PUMP_ERROR__TIME_RANGE_TOO_LARGE]: ``,
    [PUMP_ERROR__TOO_LITTLE_SOL_RECEIVED]: `slippage: Too little SOL received to sell the given amount of tokens.`,
    [PUMP_ERROR__TOO_MUCH_SOL_REQUIRED]: `slippage: Too much SOL required to buy the given amount of tokens.`,
    [PUMP_ERROR__TRUNCATION]: `Truncation`,
    [PUMP_ERROR__UNSORTED_NOT_UNIQUE_FEE_RECIPIENTS]: `Unsorted or not unique fee recipients`,
    [PUMP_ERROR__WITHDRAW_TOO_FREQUENT]: `Withdraw too frequent`,
  };
}

export function getPumpErrorMessage(code: PumpError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (pumpErrorMessages as Record<PumpError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isPumpError<TProgramErrorCode extends PumpError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    PUMP_PROGRAM_ADDRESS,
    code
  );
}
