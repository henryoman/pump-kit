/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { PUMP_AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WITHDRAW_DISCRIMINATOR = new Uint8Array([
  183, 18, 70, 156, 148, 109, 161, 34,
]);

export function getWithdrawDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(WITHDRAW_DISCRIMINATOR);
}

export type WithdrawInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountGlobalConfig extends string | AccountMeta<string> = string,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountBaseMint extends string | AccountMeta<string> = string,
  TAccountQuoteMint extends string | AccountMeta<string> = string,
  TAccountLpMint extends string | AccountMeta<string> = string,
  TAccountUserBaseTokenAccount extends string | AccountMeta<string> = string,
  TAccountUserQuoteTokenAccount extends string | AccountMeta<string> = string,
  TAccountUserPoolTokenAccount extends string | AccountMeta<string> = string,
  TAccountPoolBaseTokenAccount extends string | AccountMeta<string> = string,
  TAccountPoolQuoteTokenAccount extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountToken2022Program extends
    | string
    | AccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountGlobalConfig extends string
        ? ReadonlyAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountUser extends string
        ? ReadonlySignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountBaseMint extends string
        ? ReadonlyAccount<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountUserBaseTokenAccount extends string
        ? WritableAccount<TAccountUserBaseTokenAccount>
        : TAccountUserBaseTokenAccount,
      TAccountUserQuoteTokenAccount extends string
        ? WritableAccount<TAccountUserQuoteTokenAccount>
        : TAccountUserQuoteTokenAccount,
      TAccountUserPoolTokenAccount extends string
        ? WritableAccount<TAccountUserPoolTokenAccount>
        : TAccountUserPoolTokenAccount,
      TAccountPoolBaseTokenAccount extends string
        ? WritableAccount<TAccountPoolBaseTokenAccount>
        : TAccountPoolBaseTokenAccount,
      TAccountPoolQuoteTokenAccount extends string
        ? WritableAccount<TAccountPoolQuoteTokenAccount>
        : TAccountPoolQuoteTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawInstructionData = {
  discriminator: ReadonlyUint8Array;
  lpTokenAmountIn: bigint;
  minBaseAmountOut: bigint;
  minQuoteAmountOut: bigint;
};

export type WithdrawInstructionDataArgs = {
  lpTokenAmountIn: number | bigint;
  minBaseAmountOut: number | bigint;
  minQuoteAmountOut: number | bigint;
};

export function getWithdrawInstructionDataEncoder(): FixedSizeEncoder<WithdrawInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['lpTokenAmountIn', getU64Encoder()],
      ['minBaseAmountOut', getU64Encoder()],
      ['minQuoteAmountOut', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_DISCRIMINATOR })
  );
}

export function getWithdrawInstructionDataDecoder(): FixedSizeDecoder<WithdrawInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['lpTokenAmountIn', getU64Decoder()],
    ['minBaseAmountOut', getU64Decoder()],
    ['minQuoteAmountOut', getU64Decoder()],
  ]);
}

export function getWithdrawInstructionDataCodec(): FixedSizeCodec<
  WithdrawInstructionDataArgs,
  WithdrawInstructionData
> {
  return combineCodec(
    getWithdrawInstructionDataEncoder(),
    getWithdrawInstructionDataDecoder()
  );
}

export type WithdrawAsyncInput<
  TAccountPool extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountUser extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountLpMint extends string = string,
  TAccountUserBaseTokenAccount extends string = string,
  TAccountUserQuoteTokenAccount extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountPoolBaseTokenAccount extends string = string,
  TAccountPoolQuoteTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  pool: Address<TAccountPool>;
  globalConfig: Address<TAccountGlobalConfig>;
  user: TransactionSigner<TAccountUser>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  lpMint: Address<TAccountLpMint>;
  userBaseTokenAccount: Address<TAccountUserBaseTokenAccount>;
  userQuoteTokenAccount: Address<TAccountUserQuoteTokenAccount>;
  userPoolTokenAccount: Address<TAccountUserPoolTokenAccount>;
  poolBaseTokenAccount: Address<TAccountPoolBaseTokenAccount>;
  poolQuoteTokenAccount: Address<TAccountPoolQuoteTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  token2022Program?: Address<TAccountToken2022Program>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  lpTokenAmountIn: WithdrawInstructionDataArgs['lpTokenAmountIn'];
  minBaseAmountOut: WithdrawInstructionDataArgs['minBaseAmountOut'];
  minQuoteAmountOut: WithdrawInstructionDataArgs['minQuoteAmountOut'];
};

export async function getWithdrawInstructionAsync<
  TAccountPool extends string,
  TAccountGlobalConfig extends string,
  TAccountUser extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountLpMint extends string,
  TAccountUserBaseTokenAccount extends string,
  TAccountUserQuoteTokenAccount extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountPoolBaseTokenAccount extends string,
  TAccountPoolQuoteTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountToken2022Program extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: WithdrawAsyncInput<
    TAccountPool,
    TAccountGlobalConfig,
    TAccountUser,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountUserBaseTokenAccount,
    TAccountUserQuoteTokenAccount,
    TAccountUserPoolTokenAccount,
    TAccountPoolBaseTokenAccount,
    TAccountPoolQuoteTokenAccount,
    TAccountTokenProgram,
    TAccountToken2022Program,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WithdrawInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountGlobalConfig,
    TAccountUser,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountUserBaseTokenAccount,
    TAccountUserQuoteTokenAccount,
    TAccountUserPoolTokenAccount,
    TAccountPoolBaseTokenAccount,
    TAccountPoolQuoteTokenAccount,
    TAccountTokenProgram,
    TAccountToken2022Program,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    user: { value: input.user ?? null, isWritable: false },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    userBaseTokenAccount: {
      value: input.userBaseTokenAccount ?? null,
      isWritable: true,
    },
    userQuoteTokenAccount: {
      value: input.userQuoteTokenAccount ?? null,
      isWritable: true,
    },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    poolBaseTokenAccount: {
      value: input.poolBaseTokenAccount ?? null,
      isWritable: true,
    },
    poolQuoteTokenAccount: {
      value: input.poolQuoteTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.token2022Program.value) {
    accounts.token2022Program.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.userBaseTokenAccount),
      getAccountMeta(accounts.userQuoteTokenAccount),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.poolBaseTokenAccount),
      getAccountMeta(accounts.poolQuoteTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getWithdrawInstructionDataEncoder().encode(
      args as WithdrawInstructionDataArgs
    ),
    programAddress,
  } as WithdrawInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountGlobalConfig,
    TAccountUser,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountUserBaseTokenAccount,
    TAccountUserQuoteTokenAccount,
    TAccountUserPoolTokenAccount,
    TAccountPoolBaseTokenAccount,
    TAccountPoolQuoteTokenAccount,
    TAccountTokenProgram,
    TAccountToken2022Program,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type WithdrawInput<
  TAccountPool extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountUser extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountLpMint extends string = string,
  TAccountUserBaseTokenAccount extends string = string,
  TAccountUserQuoteTokenAccount extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountPoolBaseTokenAccount extends string = string,
  TAccountPoolQuoteTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  pool: Address<TAccountPool>;
  globalConfig: Address<TAccountGlobalConfig>;
  user: TransactionSigner<TAccountUser>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  lpMint: Address<TAccountLpMint>;
  userBaseTokenAccount: Address<TAccountUserBaseTokenAccount>;
  userQuoteTokenAccount: Address<TAccountUserQuoteTokenAccount>;
  userPoolTokenAccount: Address<TAccountUserPoolTokenAccount>;
  poolBaseTokenAccount: Address<TAccountPoolBaseTokenAccount>;
  poolQuoteTokenAccount: Address<TAccountPoolQuoteTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  token2022Program?: Address<TAccountToken2022Program>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  lpTokenAmountIn: WithdrawInstructionDataArgs['lpTokenAmountIn'];
  minBaseAmountOut: WithdrawInstructionDataArgs['minBaseAmountOut'];
  minQuoteAmountOut: WithdrawInstructionDataArgs['minQuoteAmountOut'];
};

export function getWithdrawInstruction<
  TAccountPool extends string,
  TAccountGlobalConfig extends string,
  TAccountUser extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountLpMint extends string,
  TAccountUserBaseTokenAccount extends string,
  TAccountUserQuoteTokenAccount extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountPoolBaseTokenAccount extends string,
  TAccountPoolQuoteTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountToken2022Program extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: WithdrawInput<
    TAccountPool,
    TAccountGlobalConfig,
    TAccountUser,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountUserBaseTokenAccount,
    TAccountUserQuoteTokenAccount,
    TAccountUserPoolTokenAccount,
    TAccountPoolBaseTokenAccount,
    TAccountPoolQuoteTokenAccount,
    TAccountTokenProgram,
    TAccountToken2022Program,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountGlobalConfig,
  TAccountUser,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountLpMint,
  TAccountUserBaseTokenAccount,
  TAccountUserQuoteTokenAccount,
  TAccountUserPoolTokenAccount,
  TAccountPoolBaseTokenAccount,
  TAccountPoolQuoteTokenAccount,
  TAccountTokenProgram,
  TAccountToken2022Program,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    user: { value: input.user ?? null, isWritable: false },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    userBaseTokenAccount: {
      value: input.userBaseTokenAccount ?? null,
      isWritable: true,
    },
    userQuoteTokenAccount: {
      value: input.userQuoteTokenAccount ?? null,
      isWritable: true,
    },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    poolBaseTokenAccount: {
      value: input.poolBaseTokenAccount ?? null,
      isWritable: true,
    },
    poolQuoteTokenAccount: {
      value: input.poolQuoteTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.token2022Program.value) {
    accounts.token2022Program.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.userBaseTokenAccount),
      getAccountMeta(accounts.userQuoteTokenAccount),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.poolBaseTokenAccount),
      getAccountMeta(accounts.poolQuoteTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getWithdrawInstructionDataEncoder().encode(
      args as WithdrawInstructionDataArgs
    ),
    programAddress,
  } as WithdrawInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountGlobalConfig,
    TAccountUser,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountUserBaseTokenAccount,
    TAccountUserQuoteTokenAccount,
    TAccountUserPoolTokenAccount,
    TAccountPoolBaseTokenAccount,
    TAccountPoolQuoteTokenAccount,
    TAccountTokenProgram,
    TAccountToken2022Program,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedWithdrawInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    pool: TAccountMetas[0];
    globalConfig: TAccountMetas[1];
    user: TAccountMetas[2];
    baseMint: TAccountMetas[3];
    quoteMint: TAccountMetas[4];
    lpMint: TAccountMetas[5];
    userBaseTokenAccount: TAccountMetas[6];
    userQuoteTokenAccount: TAccountMetas[7];
    userPoolTokenAccount: TAccountMetas[8];
    poolBaseTokenAccount: TAccountMetas[9];
    poolQuoteTokenAccount: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
    token2022Program: TAccountMetas[12];
    eventAuthority: TAccountMetas[13];
    program: TAccountMetas[14];
  };
  data: WithdrawInstructionData;
};

export function parseWithdrawInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWithdrawInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      globalConfig: getNextAccount(),
      user: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      lpMint: getNextAccount(),
      userBaseTokenAccount: getNextAccount(),
      userQuoteTokenAccount: getNextAccount(),
      userPoolTokenAccount: getNextAccount(),
      poolBaseTokenAccount: getNextAccount(),
      poolQuoteTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      token2022Program: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getWithdrawInstructionDataDecoder().decode(instruction.data),
  };
}
