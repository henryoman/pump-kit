/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PUMP_AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const ADMIN_UPDATE_TOKEN_INCENTIVES_DISCRIMINATOR = new Uint8Array([
  209, 11, 115, 87, 213, 23, 124, 204,
]);

export function getAdminUpdateTokenIncentivesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADMIN_UPDATE_TOKEN_INCENTIVES_DISCRIMINATOR
  );
}

export type AdminUpdateTokenIncentivesInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountGlobalConfig extends string | AccountMeta<string> = string,
  TAccountGlobalVolumeAccumulator extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountGlobalIncentiveTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountGlobalConfig extends string
        ? ReadonlyAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountGlobalVolumeAccumulator extends string
        ? WritableAccount<TAccountGlobalVolumeAccumulator>
        : TAccountGlobalVolumeAccumulator,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountGlobalIncentiveTokenAccount extends string
        ? WritableAccount<TAccountGlobalIncentiveTokenAccount>
        : TAccountGlobalIncentiveTokenAccount,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AdminUpdateTokenIncentivesInstructionData = {
  discriminator: ReadonlyUint8Array;
  startTime: bigint;
  endTime: bigint;
  secondsInADay: bigint;
  dayNumber: bigint;
  tokenSupplyPerDay: bigint;
};

export type AdminUpdateTokenIncentivesInstructionDataArgs = {
  startTime: number | bigint;
  endTime: number | bigint;
  secondsInADay: number | bigint;
  dayNumber: number | bigint;
  tokenSupplyPerDay: number | bigint;
};

export function getAdminUpdateTokenIncentivesInstructionDataEncoder(): FixedSizeEncoder<AdminUpdateTokenIncentivesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['startTime', getI64Encoder()],
      ['endTime', getI64Encoder()],
      ['secondsInADay', getI64Encoder()],
      ['dayNumber', getU64Encoder()],
      ['tokenSupplyPerDay', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: ADMIN_UPDATE_TOKEN_INCENTIVES_DISCRIMINATOR,
    })
  );
}

export function getAdminUpdateTokenIncentivesInstructionDataDecoder(): FixedSizeDecoder<AdminUpdateTokenIncentivesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['startTime', getI64Decoder()],
    ['endTime', getI64Decoder()],
    ['secondsInADay', getI64Decoder()],
    ['dayNumber', getU64Decoder()],
    ['tokenSupplyPerDay', getU64Decoder()],
  ]);
}

export function getAdminUpdateTokenIncentivesInstructionDataCodec(): FixedSizeCodec<
  AdminUpdateTokenIncentivesInstructionDataArgs,
  AdminUpdateTokenIncentivesInstructionData
> {
  return combineCodec(
    getAdminUpdateTokenIncentivesInstructionDataEncoder(),
    getAdminUpdateTokenIncentivesInstructionDataDecoder()
  );
}

export type AdminUpdateTokenIncentivesAsyncInput<
  TAccountAdmin extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountGlobalVolumeAccumulator extends string = string,
  TAccountMint extends string = string,
  TAccountGlobalIncentiveTokenAccount extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  globalConfig?: Address<TAccountGlobalConfig>;
  globalVolumeAccumulator?: Address<TAccountGlobalVolumeAccumulator>;
  mint: Address<TAccountMint>;
  globalIncentiveTokenAccount?: Address<TAccountGlobalIncentiveTokenAccount>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  startTime: AdminUpdateTokenIncentivesInstructionDataArgs['startTime'];
  endTime: AdminUpdateTokenIncentivesInstructionDataArgs['endTime'];
  secondsInADay: AdminUpdateTokenIncentivesInstructionDataArgs['secondsInADay'];
  dayNumber: AdminUpdateTokenIncentivesInstructionDataArgs['dayNumber'];
  tokenSupplyPerDay: AdminUpdateTokenIncentivesInstructionDataArgs['tokenSupplyPerDay'];
};

export async function getAdminUpdateTokenIncentivesInstructionAsync<
  TAccountAdmin extends string,
  TAccountGlobalConfig extends string,
  TAccountGlobalVolumeAccumulator extends string,
  TAccountMint extends string,
  TAccountGlobalIncentiveTokenAccount extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: AdminUpdateTokenIncentivesAsyncInput<
    TAccountAdmin,
    TAccountGlobalConfig,
    TAccountGlobalVolumeAccumulator,
    TAccountMint,
    TAccountGlobalIncentiveTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  AdminUpdateTokenIncentivesInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountGlobalConfig,
    TAccountGlobalVolumeAccumulator,
    TAccountMint,
    TAccountGlobalIncentiveTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    globalVolumeAccumulator: {
      value: input.globalVolumeAccumulator ?? null,
      isWritable: true,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    globalIncentiveTokenAccount: {
      value: input.globalIncentiveTokenAccount ?? null,
      isWritable: true,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.globalConfig.value) {
    accounts.globalConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 108, 111, 98, 97, 108, 95, 99, 111, 110, 102, 105, 103,
          ])
        ),
      ],
    });
  }
  if (!accounts.globalVolumeAccumulator.value) {
    accounts.globalVolumeAccumulator.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 108, 111, 98, 97, 108, 95, 118, 111, 108, 117, 109, 101, 95,
            97, 99, 99, 117, 109, 117, 108, 97, 116, 111, 114,
          ])
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.globalIncentiveTokenAccount.value) {
    accounts.globalIncentiveTokenAccount.value = await getProgramDerivedAddress(
      {
        programAddress:
          'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
        seeds: [
          getAddressEncoder().encode(
            expectAddress(accounts.globalVolumeAccumulator.value)
          ),
          getAddressEncoder().encode(
            expectAddress(accounts.tokenProgram.value)
          ),
          getAddressEncoder().encode(expectAddress(accounts.mint.value)),
        ],
      }
    );
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.globalVolumeAccumulator),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.globalIncentiveTokenAccount),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getAdminUpdateTokenIncentivesInstructionDataEncoder().encode(
      args as AdminUpdateTokenIncentivesInstructionDataArgs
    ),
    programAddress,
  } as AdminUpdateTokenIncentivesInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountGlobalConfig,
    TAccountGlobalVolumeAccumulator,
    TAccountMint,
    TAccountGlobalIncentiveTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type AdminUpdateTokenIncentivesInput<
  TAccountAdmin extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountGlobalVolumeAccumulator extends string = string,
  TAccountMint extends string = string,
  TAccountGlobalIncentiveTokenAccount extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  globalConfig: Address<TAccountGlobalConfig>;
  globalVolumeAccumulator: Address<TAccountGlobalVolumeAccumulator>;
  mint: Address<TAccountMint>;
  globalIncentiveTokenAccount: Address<TAccountGlobalIncentiveTokenAccount>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  startTime: AdminUpdateTokenIncentivesInstructionDataArgs['startTime'];
  endTime: AdminUpdateTokenIncentivesInstructionDataArgs['endTime'];
  secondsInADay: AdminUpdateTokenIncentivesInstructionDataArgs['secondsInADay'];
  dayNumber: AdminUpdateTokenIncentivesInstructionDataArgs['dayNumber'];
  tokenSupplyPerDay: AdminUpdateTokenIncentivesInstructionDataArgs['tokenSupplyPerDay'];
};

export function getAdminUpdateTokenIncentivesInstruction<
  TAccountAdmin extends string,
  TAccountGlobalConfig extends string,
  TAccountGlobalVolumeAccumulator extends string,
  TAccountMint extends string,
  TAccountGlobalIncentiveTokenAccount extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: AdminUpdateTokenIncentivesInput<
    TAccountAdmin,
    TAccountGlobalConfig,
    TAccountGlobalVolumeAccumulator,
    TAccountMint,
    TAccountGlobalIncentiveTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AdminUpdateTokenIncentivesInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountGlobalConfig,
  TAccountGlobalVolumeAccumulator,
  TAccountMint,
  TAccountGlobalIncentiveTokenAccount,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    globalVolumeAccumulator: {
      value: input.globalVolumeAccumulator ?? null,
      isWritable: true,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    globalIncentiveTokenAccount: {
      value: input.globalIncentiveTokenAccount ?? null,
      isWritable: true,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.globalVolumeAccumulator),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.globalIncentiveTokenAccount),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getAdminUpdateTokenIncentivesInstructionDataEncoder().encode(
      args as AdminUpdateTokenIncentivesInstructionDataArgs
    ),
    programAddress,
  } as AdminUpdateTokenIncentivesInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountGlobalConfig,
    TAccountGlobalVolumeAccumulator,
    TAccountMint,
    TAccountGlobalIncentiveTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedAdminUpdateTokenIncentivesInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    globalConfig: TAccountMetas[1];
    globalVolumeAccumulator: TAccountMetas[2];
    mint: TAccountMetas[3];
    globalIncentiveTokenAccount: TAccountMetas[4];
    associatedTokenProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    eventAuthority: TAccountMetas[8];
    program: TAccountMetas[9];
  };
  data: AdminUpdateTokenIncentivesInstructionData;
};

export function parseAdminUpdateTokenIncentivesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAdminUpdateTokenIncentivesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      globalConfig: getNextAccount(),
      globalVolumeAccumulator: getNextAccount(),
      mint: getNextAccount(),
      globalIncentiveTokenAccount: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getAdminUpdateTokenIncentivesInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
