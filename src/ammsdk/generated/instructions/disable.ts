/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { PUMP_AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DISABLE_DISCRIMINATOR = new Uint8Array([
  185, 173, 187, 90, 216, 15, 238, 233,
]);

export function getDisableDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(DISABLE_DISCRIMINATOR);
}

export type DisableInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountGlobalConfig extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountGlobalConfig extends string
        ? WritableAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DisableInstructionData = {
  discriminator: ReadonlyUint8Array;
  disableCreatePool: boolean;
  disableDeposit: boolean;
  disableWithdraw: boolean;
  disableBuy: boolean;
  disableSell: boolean;
};

export type DisableInstructionDataArgs = {
  disableCreatePool: boolean;
  disableDeposit: boolean;
  disableWithdraw: boolean;
  disableBuy: boolean;
  disableSell: boolean;
};

export function getDisableInstructionDataEncoder(): FixedSizeEncoder<DisableInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['disableCreatePool', getBooleanEncoder()],
      ['disableDeposit', getBooleanEncoder()],
      ['disableWithdraw', getBooleanEncoder()],
      ['disableBuy', getBooleanEncoder()],
      ['disableSell', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: DISABLE_DISCRIMINATOR })
  );
}

export function getDisableInstructionDataDecoder(): FixedSizeDecoder<DisableInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['disableCreatePool', getBooleanDecoder()],
    ['disableDeposit', getBooleanDecoder()],
    ['disableWithdraw', getBooleanDecoder()],
    ['disableBuy', getBooleanDecoder()],
    ['disableSell', getBooleanDecoder()],
  ]);
}

export function getDisableInstructionDataCodec(): FixedSizeCodec<
  DisableInstructionDataArgs,
  DisableInstructionData
> {
  return combineCodec(
    getDisableInstructionDataEncoder(),
    getDisableInstructionDataDecoder()
  );
}

export type DisableAsyncInput<
  TAccountAdmin extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  globalConfig: Address<TAccountGlobalConfig>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  disableCreatePool: DisableInstructionDataArgs['disableCreatePool'];
  disableDeposit: DisableInstructionDataArgs['disableDeposit'];
  disableWithdraw: DisableInstructionDataArgs['disableWithdraw'];
  disableBuy: DisableInstructionDataArgs['disableBuy'];
  disableSell: DisableInstructionDataArgs['disableSell'];
};

export async function getDisableInstructionAsync<
  TAccountAdmin extends string,
  TAccountGlobalConfig extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: DisableAsyncInput<
    TAccountAdmin,
    TAccountGlobalConfig,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  DisableInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountGlobalConfig,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    globalConfig: { value: input.globalConfig ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getDisableInstructionDataEncoder().encode(
      args as DisableInstructionDataArgs
    ),
    programAddress,
  } as DisableInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountGlobalConfig,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type DisableInput<
  TAccountAdmin extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  globalConfig: Address<TAccountGlobalConfig>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  disableCreatePool: DisableInstructionDataArgs['disableCreatePool'];
  disableDeposit: DisableInstructionDataArgs['disableDeposit'];
  disableWithdraw: DisableInstructionDataArgs['disableWithdraw'];
  disableBuy: DisableInstructionDataArgs['disableBuy'];
  disableSell: DisableInstructionDataArgs['disableSell'];
};

export function getDisableInstruction<
  TAccountAdmin extends string,
  TAccountGlobalConfig extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: DisableInput<
    TAccountAdmin,
    TAccountGlobalConfig,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DisableInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountGlobalConfig,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    globalConfig: { value: input.globalConfig ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getDisableInstructionDataEncoder().encode(
      args as DisableInstructionDataArgs
    ),
    programAddress,
  } as DisableInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountGlobalConfig,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedDisableInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    globalConfig: TAccountMetas[1];
    eventAuthority: TAccountMetas[2];
    program: TAccountMetas[3];
  };
  data: DisableInstructionData;
};

export function parseDisableInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedDisableInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      globalConfig: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getDisableInstructionDataDecoder().decode(instruction.data),
  };
}
