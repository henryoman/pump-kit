/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PUMP_AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_TOKEN_INCENTIVES_DISCRIMINATOR = new Uint8Array([
  16, 4, 71, 28, 204, 1, 40, 27,
]);

export function getClaimTokenIncentivesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_TOKEN_INCENTIVES_DISCRIMINATOR
  );
}

export type ClaimTokenIncentivesInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountUserAta extends string | AccountMeta<string> = string,
  TAccountGlobalVolumeAccumulator extends string | AccountMeta<string> = string,
  TAccountGlobalIncentiveTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountUserVolumeAccumulator extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends
    | string
    | AccountMeta<string> = 'pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA',
  TAccountPayer extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUser extends string
        ? ReadonlyAccount<TAccountUser>
        : TAccountUser,
      TAccountUserAta extends string
        ? WritableAccount<TAccountUserAta>
        : TAccountUserAta,
      TAccountGlobalVolumeAccumulator extends string
        ? ReadonlyAccount<TAccountGlobalVolumeAccumulator>
        : TAccountGlobalVolumeAccumulator,
      TAccountGlobalIncentiveTokenAccount extends string
        ? WritableAccount<TAccountGlobalIncentiveTokenAccount>
        : TAccountGlobalIncentiveTokenAccount,
      TAccountUserVolumeAccumulator extends string
        ? WritableAccount<TAccountUserVolumeAccumulator>
        : TAccountUserVolumeAccumulator,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimTokenIncentivesInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ClaimTokenIncentivesInstructionDataArgs = {};

export function getClaimTokenIncentivesInstructionDataEncoder(): FixedSizeEncoder<ClaimTokenIncentivesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: CLAIM_TOKEN_INCENTIVES_DISCRIMINATOR,
    })
  );
}

export function getClaimTokenIncentivesInstructionDataDecoder(): FixedSizeDecoder<ClaimTokenIncentivesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimTokenIncentivesInstructionDataCodec(): FixedSizeCodec<
  ClaimTokenIncentivesInstructionDataArgs,
  ClaimTokenIncentivesInstructionData
> {
  return combineCodec(
    getClaimTokenIncentivesInstructionDataEncoder(),
    getClaimTokenIncentivesInstructionDataDecoder()
  );
}

export type ClaimTokenIncentivesAsyncInput<
  TAccountUser extends string = string,
  TAccountUserAta extends string = string,
  TAccountGlobalVolumeAccumulator extends string = string,
  TAccountGlobalIncentiveTokenAccount extends string = string,
  TAccountUserVolumeAccumulator extends string = string,
  TAccountMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
  TAccountPayer extends string = string,
> = {
  user: Address<TAccountUser>;
  userAta?: Address<TAccountUserAta>;
  globalVolumeAccumulator?: Address<TAccountGlobalVolumeAccumulator>;
  globalIncentiveTokenAccount?: Address<TAccountGlobalIncentiveTokenAccount>;
  userVolumeAccumulator?: Address<TAccountUserVolumeAccumulator>;
  mint: Address<TAccountMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program?: Address<TAccountProgram>;
  payer: TransactionSigner<TAccountPayer>;
};

export async function getClaimTokenIncentivesInstructionAsync<
  TAccountUser extends string,
  TAccountUserAta extends string,
  TAccountGlobalVolumeAccumulator extends string,
  TAccountGlobalIncentiveTokenAccount extends string,
  TAccountUserVolumeAccumulator extends string,
  TAccountMint extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TAccountPayer extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: ClaimTokenIncentivesAsyncInput<
    TAccountUser,
    TAccountUserAta,
    TAccountGlobalVolumeAccumulator,
    TAccountGlobalIncentiveTokenAccount,
    TAccountUserVolumeAccumulator,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountPayer
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimTokenIncentivesInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountUserAta,
    TAccountGlobalVolumeAccumulator,
    TAccountGlobalIncentiveTokenAccount,
    TAccountUserVolumeAccumulator,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountPayer
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: false },
    userAta: { value: input.userAta ?? null, isWritable: true },
    globalVolumeAccumulator: {
      value: input.globalVolumeAccumulator ?? null,
      isWritable: false,
    },
    globalIncentiveTokenAccount: {
      value: input.globalIncentiveTokenAccount ?? null,
      isWritable: true,
    },
    userVolumeAccumulator: {
      value: input.userVolumeAccumulator ?? null,
      isWritable: true,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.userAta.value) {
    accounts.userAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.globalVolumeAccumulator.value) {
    accounts.globalVolumeAccumulator.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 108, 111, 98, 97, 108, 95, 118, 111, 108, 117, 109, 101, 95,
            97, 99, 99, 117, 109, 117, 108, 97, 116, 111, 114,
          ])
        ),
      ],
    });
  }
  if (!accounts.globalIncentiveTokenAccount.value) {
    accounts.globalIncentiveTokenAccount.value = await getProgramDerivedAddress(
      {
        programAddress:
          'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
        seeds: [
          getAddressEncoder().encode(
            expectAddress(accounts.globalVolumeAccumulator.value)
          ),
          getAddressEncoder().encode(
            expectAddress(accounts.tokenProgram.value)
          ),
          getAddressEncoder().encode(expectAddress(accounts.mint.value)),
        ],
      }
    );
  }
  if (!accounts.userVolumeAccumulator.value) {
    accounts.userVolumeAccumulator.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            117, 115, 101, 114, 95, 118, 111, 108, 117, 109, 101, 95, 97, 99,
            99, 117, 109, 117, 108, 97, 116, 111, 114,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.program.value) {
    accounts.program.value =
      'pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA' as Address<'pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.userAta),
      getAccountMeta(accounts.globalVolumeAccumulator),
      getAccountMeta(accounts.globalIncentiveTokenAccount),
      getAccountMeta(accounts.userVolumeAccumulator),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
      getAccountMeta(accounts.payer),
    ],
    data: getClaimTokenIncentivesInstructionDataEncoder().encode({}),
    programAddress,
  } as ClaimTokenIncentivesInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountUserAta,
    TAccountGlobalVolumeAccumulator,
    TAccountGlobalIncentiveTokenAccount,
    TAccountUserVolumeAccumulator,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountPayer
  >);
}

export type ClaimTokenIncentivesInput<
  TAccountUser extends string = string,
  TAccountUserAta extends string = string,
  TAccountGlobalVolumeAccumulator extends string = string,
  TAccountGlobalIncentiveTokenAccount extends string = string,
  TAccountUserVolumeAccumulator extends string = string,
  TAccountMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
  TAccountPayer extends string = string,
> = {
  user: Address<TAccountUser>;
  userAta: Address<TAccountUserAta>;
  globalVolumeAccumulator: Address<TAccountGlobalVolumeAccumulator>;
  globalIncentiveTokenAccount: Address<TAccountGlobalIncentiveTokenAccount>;
  userVolumeAccumulator: Address<TAccountUserVolumeAccumulator>;
  mint: Address<TAccountMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program?: Address<TAccountProgram>;
  payer: TransactionSigner<TAccountPayer>;
};

export function getClaimTokenIncentivesInstruction<
  TAccountUser extends string,
  TAccountUserAta extends string,
  TAccountGlobalVolumeAccumulator extends string,
  TAccountGlobalIncentiveTokenAccount extends string,
  TAccountUserVolumeAccumulator extends string,
  TAccountMint extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TAccountPayer extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: ClaimTokenIncentivesInput<
    TAccountUser,
    TAccountUserAta,
    TAccountGlobalVolumeAccumulator,
    TAccountGlobalIncentiveTokenAccount,
    TAccountUserVolumeAccumulator,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountPayer
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimTokenIncentivesInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountUserAta,
  TAccountGlobalVolumeAccumulator,
  TAccountGlobalIncentiveTokenAccount,
  TAccountUserVolumeAccumulator,
  TAccountMint,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram,
  TAccountEventAuthority,
  TAccountProgram,
  TAccountPayer
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: false },
    userAta: { value: input.userAta ?? null, isWritable: true },
    globalVolumeAccumulator: {
      value: input.globalVolumeAccumulator ?? null,
      isWritable: false,
    },
    globalIncentiveTokenAccount: {
      value: input.globalIncentiveTokenAccount ?? null,
      isWritable: true,
    },
    userVolumeAccumulator: {
      value: input.userVolumeAccumulator ?? null,
      isWritable: true,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.program.value) {
    accounts.program.value =
      'pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA' as Address<'pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.userAta),
      getAccountMeta(accounts.globalVolumeAccumulator),
      getAccountMeta(accounts.globalIncentiveTokenAccount),
      getAccountMeta(accounts.userVolumeAccumulator),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
      getAccountMeta(accounts.payer),
    ],
    data: getClaimTokenIncentivesInstructionDataEncoder().encode({}),
    programAddress,
  } as ClaimTokenIncentivesInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountUserAta,
    TAccountGlobalVolumeAccumulator,
    TAccountGlobalIncentiveTokenAccount,
    TAccountUserVolumeAccumulator,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountPayer
  >);
}

export type ParsedClaimTokenIncentivesInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    userAta: TAccountMetas[1];
    globalVolumeAccumulator: TAccountMetas[2];
    globalIncentiveTokenAccount: TAccountMetas[3];
    userVolumeAccumulator: TAccountMetas[4];
    mint: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
    eventAuthority: TAccountMetas[9];
    program: TAccountMetas[10];
    payer: TAccountMetas[11];
  };
  data: ClaimTokenIncentivesInstructionData;
};

export function parseClaimTokenIncentivesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimTokenIncentivesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      userAta: getNextAccount(),
      globalVolumeAccumulator: getNextAccount(),
      globalIncentiveTokenAccount: getNextAccount(),
      userVolumeAccumulator: getNextAccount(),
      mint: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
      payer: getNextAccount(),
    },
    data: getClaimTokenIncentivesInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
