/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PUMP_AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getOptionBoolDecoder,
  getOptionBoolEncoder,
  type OptionBool,
  type OptionBoolArgs,
} from '../types';

export const BUY_EXACT_QUOTE_IN_DISCRIMINATOR = new Uint8Array([
  198, 46, 21, 82, 180, 217, 232, 112,
]);

export function getBuyExactQuoteInDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BUY_EXACT_QUOTE_IN_DISCRIMINATOR
  );
}

export type BuyExactQuoteInInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountGlobalConfig extends string | AccountMeta<string> = string,
  TAccountBaseMint extends string | AccountMeta<string> = string,
  TAccountQuoteMint extends string | AccountMeta<string> = string,
  TAccountUserBaseTokenAccount extends string | AccountMeta<string> = string,
  TAccountUserQuoteTokenAccount extends string | AccountMeta<string> = string,
  TAccountPoolBaseTokenAccount extends string | AccountMeta<string> = string,
  TAccountPoolQuoteTokenAccount extends string | AccountMeta<string> = string,
  TAccountProtocolFeeRecipient extends string | AccountMeta<string> = string,
  TAccountProtocolFeeRecipientTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountBaseTokenProgram extends string | AccountMeta<string> = string,
  TAccountQuoteTokenProgram extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends
    | string
    | AccountMeta<string> = 'pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA',
  TAccountCoinCreatorVaultAta extends string | AccountMeta<string> = string,
  TAccountCoinCreatorVaultAuthority extends
    | string
    | AccountMeta<string> = string,
  TAccountGlobalVolumeAccumulator extends string | AccountMeta<string> = string,
  TAccountUserVolumeAccumulator extends string | AccountMeta<string> = string,
  TAccountFeeConfig extends string | AccountMeta<string> = string,
  TAccountFeeProgram extends
    | string
    | AccountMeta<string> = 'pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountGlobalConfig extends string
        ? ReadonlyAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountBaseMint extends string
        ? ReadonlyAccount<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountUserBaseTokenAccount extends string
        ? WritableAccount<TAccountUserBaseTokenAccount>
        : TAccountUserBaseTokenAccount,
      TAccountUserQuoteTokenAccount extends string
        ? WritableAccount<TAccountUserQuoteTokenAccount>
        : TAccountUserQuoteTokenAccount,
      TAccountPoolBaseTokenAccount extends string
        ? WritableAccount<TAccountPoolBaseTokenAccount>
        : TAccountPoolBaseTokenAccount,
      TAccountPoolQuoteTokenAccount extends string
        ? WritableAccount<TAccountPoolQuoteTokenAccount>
        : TAccountPoolQuoteTokenAccount,
      TAccountProtocolFeeRecipient extends string
        ? ReadonlyAccount<TAccountProtocolFeeRecipient>
        : TAccountProtocolFeeRecipient,
      TAccountProtocolFeeRecipientTokenAccount extends string
        ? WritableAccount<TAccountProtocolFeeRecipientTokenAccount>
        : TAccountProtocolFeeRecipientTokenAccount,
      TAccountBaseTokenProgram extends string
        ? ReadonlyAccount<TAccountBaseTokenProgram>
        : TAccountBaseTokenProgram,
      TAccountQuoteTokenProgram extends string
        ? ReadonlyAccount<TAccountQuoteTokenProgram>
        : TAccountQuoteTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      TAccountCoinCreatorVaultAta extends string
        ? WritableAccount<TAccountCoinCreatorVaultAta>
        : TAccountCoinCreatorVaultAta,
      TAccountCoinCreatorVaultAuthority extends string
        ? ReadonlyAccount<TAccountCoinCreatorVaultAuthority>
        : TAccountCoinCreatorVaultAuthority,
      TAccountGlobalVolumeAccumulator extends string
        ? WritableAccount<TAccountGlobalVolumeAccumulator>
        : TAccountGlobalVolumeAccumulator,
      TAccountUserVolumeAccumulator extends string
        ? WritableAccount<TAccountUserVolumeAccumulator>
        : TAccountUserVolumeAccumulator,
      TAccountFeeConfig extends string
        ? ReadonlyAccount<TAccountFeeConfig>
        : TAccountFeeConfig,
      TAccountFeeProgram extends string
        ? ReadonlyAccount<TAccountFeeProgram>
        : TAccountFeeProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BuyExactQuoteInInstructionData = {
  discriminator: ReadonlyUint8Array;
  spendableQuoteIn: bigint;
  minBaseAmountOut: bigint;
  trackVolume: OptionBool;
};

export type BuyExactQuoteInInstructionDataArgs = {
  spendableQuoteIn: number | bigint;
  minBaseAmountOut: number | bigint;
  trackVolume: OptionBoolArgs;
};

export function getBuyExactQuoteInInstructionDataEncoder(): FixedSizeEncoder<BuyExactQuoteInInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['spendableQuoteIn', getU64Encoder()],
      ['minBaseAmountOut', getU64Encoder()],
      ['trackVolume', getOptionBoolEncoder()],
    ]),
    (value) => ({ ...value, discriminator: BUY_EXACT_QUOTE_IN_DISCRIMINATOR })
  );
}

export function getBuyExactQuoteInInstructionDataDecoder(): FixedSizeDecoder<BuyExactQuoteInInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['spendableQuoteIn', getU64Decoder()],
    ['minBaseAmountOut', getU64Decoder()],
    ['trackVolume', getOptionBoolDecoder()],
  ]);
}

export function getBuyExactQuoteInInstructionDataCodec(): FixedSizeCodec<
  BuyExactQuoteInInstructionDataArgs,
  BuyExactQuoteInInstructionData
> {
  return combineCodec(
    getBuyExactQuoteInInstructionDataEncoder(),
    getBuyExactQuoteInInstructionDataDecoder()
  );
}

export type BuyExactQuoteInAsyncInput<
  TAccountPool extends string = string,
  TAccountUser extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountUserBaseTokenAccount extends string = string,
  TAccountUserQuoteTokenAccount extends string = string,
  TAccountPoolBaseTokenAccount extends string = string,
  TAccountPoolQuoteTokenAccount extends string = string,
  TAccountProtocolFeeRecipient extends string = string,
  TAccountProtocolFeeRecipientTokenAccount extends string = string,
  TAccountBaseTokenProgram extends string = string,
  TAccountQuoteTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
  TAccountCoinCreatorVaultAta extends string = string,
  TAccountCoinCreatorVaultAuthority extends string = string,
  TAccountGlobalVolumeAccumulator extends string = string,
  TAccountUserVolumeAccumulator extends string = string,
  TAccountFeeConfig extends string = string,
  TAccountFeeProgram extends string = string,
> = {
  pool: Address<TAccountPool>;
  user: TransactionSigner<TAccountUser>;
  globalConfig: Address<TAccountGlobalConfig>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  userBaseTokenAccount: Address<TAccountUserBaseTokenAccount>;
  userQuoteTokenAccount: Address<TAccountUserQuoteTokenAccount>;
  poolBaseTokenAccount: Address<TAccountPoolBaseTokenAccount>;
  poolQuoteTokenAccount: Address<TAccountPoolQuoteTokenAccount>;
  protocolFeeRecipient: Address<TAccountProtocolFeeRecipient>;
  protocolFeeRecipientTokenAccount?: Address<TAccountProtocolFeeRecipientTokenAccount>;
  baseTokenProgram: Address<TAccountBaseTokenProgram>;
  quoteTokenProgram: Address<TAccountQuoteTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program?: Address<TAccountProgram>;
  coinCreatorVaultAta?: Address<TAccountCoinCreatorVaultAta>;
  coinCreatorVaultAuthority: Address<TAccountCoinCreatorVaultAuthority>;
  globalVolumeAccumulator?: Address<TAccountGlobalVolumeAccumulator>;
  userVolumeAccumulator?: Address<TAccountUserVolumeAccumulator>;
  feeConfig?: Address<TAccountFeeConfig>;
  feeProgram?: Address<TAccountFeeProgram>;
  spendableQuoteIn: BuyExactQuoteInInstructionDataArgs['spendableQuoteIn'];
  minBaseAmountOut: BuyExactQuoteInInstructionDataArgs['minBaseAmountOut'];
  trackVolume: BuyExactQuoteInInstructionDataArgs['trackVolume'];
};

export async function getBuyExactQuoteInInstructionAsync<
  TAccountPool extends string,
  TAccountUser extends string,
  TAccountGlobalConfig extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountUserBaseTokenAccount extends string,
  TAccountUserQuoteTokenAccount extends string,
  TAccountPoolBaseTokenAccount extends string,
  TAccountPoolQuoteTokenAccount extends string,
  TAccountProtocolFeeRecipient extends string,
  TAccountProtocolFeeRecipientTokenAccount extends string,
  TAccountBaseTokenProgram extends string,
  TAccountQuoteTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TAccountCoinCreatorVaultAta extends string,
  TAccountCoinCreatorVaultAuthority extends string,
  TAccountGlobalVolumeAccumulator extends string,
  TAccountUserVolumeAccumulator extends string,
  TAccountFeeConfig extends string,
  TAccountFeeProgram extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: BuyExactQuoteInAsyncInput<
    TAccountPool,
    TAccountUser,
    TAccountGlobalConfig,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountUserBaseTokenAccount,
    TAccountUserQuoteTokenAccount,
    TAccountPoolBaseTokenAccount,
    TAccountPoolQuoteTokenAccount,
    TAccountProtocolFeeRecipient,
    TAccountProtocolFeeRecipientTokenAccount,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountCoinCreatorVaultAta,
    TAccountCoinCreatorVaultAuthority,
    TAccountGlobalVolumeAccumulator,
    TAccountUserVolumeAccumulator,
    TAccountFeeConfig,
    TAccountFeeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  BuyExactQuoteInInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountUser,
    TAccountGlobalConfig,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountUserBaseTokenAccount,
    TAccountUserQuoteTokenAccount,
    TAccountPoolBaseTokenAccount,
    TAccountPoolQuoteTokenAccount,
    TAccountProtocolFeeRecipient,
    TAccountProtocolFeeRecipientTokenAccount,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountCoinCreatorVaultAta,
    TAccountCoinCreatorVaultAuthority,
    TAccountGlobalVolumeAccumulator,
    TAccountUserVolumeAccumulator,
    TAccountFeeConfig,
    TAccountFeeProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: false },
    user: { value: input.user ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    userBaseTokenAccount: {
      value: input.userBaseTokenAccount ?? null,
      isWritable: true,
    },
    userQuoteTokenAccount: {
      value: input.userQuoteTokenAccount ?? null,
      isWritable: true,
    },
    poolBaseTokenAccount: {
      value: input.poolBaseTokenAccount ?? null,
      isWritable: true,
    },
    poolQuoteTokenAccount: {
      value: input.poolQuoteTokenAccount ?? null,
      isWritable: true,
    },
    protocolFeeRecipient: {
      value: input.protocolFeeRecipient ?? null,
      isWritable: false,
    },
    protocolFeeRecipientTokenAccount: {
      value: input.protocolFeeRecipientTokenAccount ?? null,
      isWritable: true,
    },
    baseTokenProgram: {
      value: input.baseTokenProgram ?? null,
      isWritable: false,
    },
    quoteTokenProgram: {
      value: input.quoteTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
    coinCreatorVaultAta: {
      value: input.coinCreatorVaultAta ?? null,
      isWritable: true,
    },
    coinCreatorVaultAuthority: {
      value: input.coinCreatorVaultAuthority ?? null,
      isWritable: false,
    },
    globalVolumeAccumulator: {
      value: input.globalVolumeAccumulator ?? null,
      isWritable: true,
    },
    userVolumeAccumulator: {
      value: input.userVolumeAccumulator ?? null,
      isWritable: true,
    },
    feeConfig: { value: input.feeConfig ?? null, isWritable: false },
    feeProgram: { value: input.feeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.protocolFeeRecipientTokenAccount.value) {
    accounts.protocolFeeRecipientTokenAccount.value =
      await getProgramDerivedAddress({
        programAddress:
          'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
        seeds: [
          getAddressEncoder().encode(
            expectAddress(accounts.protocolFeeRecipient.value)
          ),
          getAddressEncoder().encode(
            expectAddress(accounts.quoteTokenProgram.value)
          ),
          getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
        ],
      });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.program.value) {
    accounts.program.value =
      'pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA' as Address<'pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA'>;
  }
  if (!accounts.coinCreatorVaultAta.value) {
    accounts.coinCreatorVaultAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.coinCreatorVaultAuthority.value)
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.quoteTokenProgram.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
      ],
    });
  }
  if (!accounts.globalVolumeAccumulator.value) {
    accounts.globalVolumeAccumulator.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 108, 111, 98, 97, 108, 95, 118, 111, 108, 117, 109, 101, 95,
            97, 99, 99, 117, 109, 117, 108, 97, 116, 111, 114,
          ])
        ),
      ],
    });
  }
  if (!accounts.userVolumeAccumulator.value) {
    accounts.userVolumeAccumulator.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            117, 115, 101, 114, 95, 118, 111, 108, 117, 109, 101, 95, 97, 99,
            99, 117, 109, 117, 108, 97, 116, 111, 114,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.feeConfig.value) {
    accounts.feeConfig.value = await getProgramDerivedAddress({
      programAddress:
        'pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ' as Address<'pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([102, 101, 101, 95, 99, 111, 110, 102, 105, 103])
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            12, 20, 222, 252, 130, 94, 198, 118, 148, 37, 8, 24, 187, 101, 64,
            101, 244, 41, 141, 49, 86, 213, 113, 180, 212, 248, 9, 12, 24, 233,
            168, 99,
          ])
        ),
      ],
    });
  }
  if (!accounts.feeProgram.value) {
    accounts.feeProgram.value =
      'pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ' as Address<'pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.userBaseTokenAccount),
      getAccountMeta(accounts.userQuoteTokenAccount),
      getAccountMeta(accounts.poolBaseTokenAccount),
      getAccountMeta(accounts.poolQuoteTokenAccount),
      getAccountMeta(accounts.protocolFeeRecipient),
      getAccountMeta(accounts.protocolFeeRecipientTokenAccount),
      getAccountMeta(accounts.baseTokenProgram),
      getAccountMeta(accounts.quoteTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
      getAccountMeta(accounts.coinCreatorVaultAta),
      getAccountMeta(accounts.coinCreatorVaultAuthority),
      getAccountMeta(accounts.globalVolumeAccumulator),
      getAccountMeta(accounts.userVolumeAccumulator),
      getAccountMeta(accounts.feeConfig),
      getAccountMeta(accounts.feeProgram),
    ],
    data: getBuyExactQuoteInInstructionDataEncoder().encode(
      args as BuyExactQuoteInInstructionDataArgs
    ),
    programAddress,
  } as BuyExactQuoteInInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountUser,
    TAccountGlobalConfig,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountUserBaseTokenAccount,
    TAccountUserQuoteTokenAccount,
    TAccountPoolBaseTokenAccount,
    TAccountPoolQuoteTokenAccount,
    TAccountProtocolFeeRecipient,
    TAccountProtocolFeeRecipientTokenAccount,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountCoinCreatorVaultAta,
    TAccountCoinCreatorVaultAuthority,
    TAccountGlobalVolumeAccumulator,
    TAccountUserVolumeAccumulator,
    TAccountFeeConfig,
    TAccountFeeProgram
  >);
}

export type BuyExactQuoteInInput<
  TAccountPool extends string = string,
  TAccountUser extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountUserBaseTokenAccount extends string = string,
  TAccountUserQuoteTokenAccount extends string = string,
  TAccountPoolBaseTokenAccount extends string = string,
  TAccountPoolQuoteTokenAccount extends string = string,
  TAccountProtocolFeeRecipient extends string = string,
  TAccountProtocolFeeRecipientTokenAccount extends string = string,
  TAccountBaseTokenProgram extends string = string,
  TAccountQuoteTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
  TAccountCoinCreatorVaultAta extends string = string,
  TAccountCoinCreatorVaultAuthority extends string = string,
  TAccountGlobalVolumeAccumulator extends string = string,
  TAccountUserVolumeAccumulator extends string = string,
  TAccountFeeConfig extends string = string,
  TAccountFeeProgram extends string = string,
> = {
  pool: Address<TAccountPool>;
  user: TransactionSigner<TAccountUser>;
  globalConfig: Address<TAccountGlobalConfig>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  userBaseTokenAccount: Address<TAccountUserBaseTokenAccount>;
  userQuoteTokenAccount: Address<TAccountUserQuoteTokenAccount>;
  poolBaseTokenAccount: Address<TAccountPoolBaseTokenAccount>;
  poolQuoteTokenAccount: Address<TAccountPoolQuoteTokenAccount>;
  protocolFeeRecipient: Address<TAccountProtocolFeeRecipient>;
  protocolFeeRecipientTokenAccount: Address<TAccountProtocolFeeRecipientTokenAccount>;
  baseTokenProgram: Address<TAccountBaseTokenProgram>;
  quoteTokenProgram: Address<TAccountQuoteTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program?: Address<TAccountProgram>;
  coinCreatorVaultAta: Address<TAccountCoinCreatorVaultAta>;
  coinCreatorVaultAuthority: Address<TAccountCoinCreatorVaultAuthority>;
  globalVolumeAccumulator: Address<TAccountGlobalVolumeAccumulator>;
  userVolumeAccumulator: Address<TAccountUserVolumeAccumulator>;
  feeConfig: Address<TAccountFeeConfig>;
  feeProgram?: Address<TAccountFeeProgram>;
  spendableQuoteIn: BuyExactQuoteInInstructionDataArgs['spendableQuoteIn'];
  minBaseAmountOut: BuyExactQuoteInInstructionDataArgs['minBaseAmountOut'];
  trackVolume: BuyExactQuoteInInstructionDataArgs['trackVolume'];
};

export function getBuyExactQuoteInInstruction<
  TAccountPool extends string,
  TAccountUser extends string,
  TAccountGlobalConfig extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountUserBaseTokenAccount extends string,
  TAccountUserQuoteTokenAccount extends string,
  TAccountPoolBaseTokenAccount extends string,
  TAccountPoolQuoteTokenAccount extends string,
  TAccountProtocolFeeRecipient extends string,
  TAccountProtocolFeeRecipientTokenAccount extends string,
  TAccountBaseTokenProgram extends string,
  TAccountQuoteTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TAccountCoinCreatorVaultAta extends string,
  TAccountCoinCreatorVaultAuthority extends string,
  TAccountGlobalVolumeAccumulator extends string,
  TAccountUserVolumeAccumulator extends string,
  TAccountFeeConfig extends string,
  TAccountFeeProgram extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: BuyExactQuoteInInput<
    TAccountPool,
    TAccountUser,
    TAccountGlobalConfig,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountUserBaseTokenAccount,
    TAccountUserQuoteTokenAccount,
    TAccountPoolBaseTokenAccount,
    TAccountPoolQuoteTokenAccount,
    TAccountProtocolFeeRecipient,
    TAccountProtocolFeeRecipientTokenAccount,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountCoinCreatorVaultAta,
    TAccountCoinCreatorVaultAuthority,
    TAccountGlobalVolumeAccumulator,
    TAccountUserVolumeAccumulator,
    TAccountFeeConfig,
    TAccountFeeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): BuyExactQuoteInInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountUser,
  TAccountGlobalConfig,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountUserBaseTokenAccount,
  TAccountUserQuoteTokenAccount,
  TAccountPoolBaseTokenAccount,
  TAccountPoolQuoteTokenAccount,
  TAccountProtocolFeeRecipient,
  TAccountProtocolFeeRecipientTokenAccount,
  TAccountBaseTokenProgram,
  TAccountQuoteTokenProgram,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram,
  TAccountEventAuthority,
  TAccountProgram,
  TAccountCoinCreatorVaultAta,
  TAccountCoinCreatorVaultAuthority,
  TAccountGlobalVolumeAccumulator,
  TAccountUserVolumeAccumulator,
  TAccountFeeConfig,
  TAccountFeeProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: false },
    user: { value: input.user ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    userBaseTokenAccount: {
      value: input.userBaseTokenAccount ?? null,
      isWritable: true,
    },
    userQuoteTokenAccount: {
      value: input.userQuoteTokenAccount ?? null,
      isWritable: true,
    },
    poolBaseTokenAccount: {
      value: input.poolBaseTokenAccount ?? null,
      isWritable: true,
    },
    poolQuoteTokenAccount: {
      value: input.poolQuoteTokenAccount ?? null,
      isWritable: true,
    },
    protocolFeeRecipient: {
      value: input.protocolFeeRecipient ?? null,
      isWritable: false,
    },
    protocolFeeRecipientTokenAccount: {
      value: input.protocolFeeRecipientTokenAccount ?? null,
      isWritable: true,
    },
    baseTokenProgram: {
      value: input.baseTokenProgram ?? null,
      isWritable: false,
    },
    quoteTokenProgram: {
      value: input.quoteTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
    coinCreatorVaultAta: {
      value: input.coinCreatorVaultAta ?? null,
      isWritable: true,
    },
    coinCreatorVaultAuthority: {
      value: input.coinCreatorVaultAuthority ?? null,
      isWritable: false,
    },
    globalVolumeAccumulator: {
      value: input.globalVolumeAccumulator ?? null,
      isWritable: true,
    },
    userVolumeAccumulator: {
      value: input.userVolumeAccumulator ?? null,
      isWritable: true,
    },
    feeConfig: { value: input.feeConfig ?? null, isWritable: false },
    feeProgram: { value: input.feeProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.program.value) {
    accounts.program.value =
      'pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA' as Address<'pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA'>;
  }
  if (!accounts.feeProgram.value) {
    accounts.feeProgram.value =
      'pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ' as Address<'pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.userBaseTokenAccount),
      getAccountMeta(accounts.userQuoteTokenAccount),
      getAccountMeta(accounts.poolBaseTokenAccount),
      getAccountMeta(accounts.poolQuoteTokenAccount),
      getAccountMeta(accounts.protocolFeeRecipient),
      getAccountMeta(accounts.protocolFeeRecipientTokenAccount),
      getAccountMeta(accounts.baseTokenProgram),
      getAccountMeta(accounts.quoteTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
      getAccountMeta(accounts.coinCreatorVaultAta),
      getAccountMeta(accounts.coinCreatorVaultAuthority),
      getAccountMeta(accounts.globalVolumeAccumulator),
      getAccountMeta(accounts.userVolumeAccumulator),
      getAccountMeta(accounts.feeConfig),
      getAccountMeta(accounts.feeProgram),
    ],
    data: getBuyExactQuoteInInstructionDataEncoder().encode(
      args as BuyExactQuoteInInstructionDataArgs
    ),
    programAddress,
  } as BuyExactQuoteInInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountUser,
    TAccountGlobalConfig,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountUserBaseTokenAccount,
    TAccountUserQuoteTokenAccount,
    TAccountPoolBaseTokenAccount,
    TAccountPoolQuoteTokenAccount,
    TAccountProtocolFeeRecipient,
    TAccountProtocolFeeRecipientTokenAccount,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram,
    TAccountCoinCreatorVaultAta,
    TAccountCoinCreatorVaultAuthority,
    TAccountGlobalVolumeAccumulator,
    TAccountUserVolumeAccumulator,
    TAccountFeeConfig,
    TAccountFeeProgram
  >);
}

export type ParsedBuyExactQuoteInInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    pool: TAccountMetas[0];
    user: TAccountMetas[1];
    globalConfig: TAccountMetas[2];
    baseMint: TAccountMetas[3];
    quoteMint: TAccountMetas[4];
    userBaseTokenAccount: TAccountMetas[5];
    userQuoteTokenAccount: TAccountMetas[6];
    poolBaseTokenAccount: TAccountMetas[7];
    poolQuoteTokenAccount: TAccountMetas[8];
    protocolFeeRecipient: TAccountMetas[9];
    protocolFeeRecipientTokenAccount: TAccountMetas[10];
    baseTokenProgram: TAccountMetas[11];
    quoteTokenProgram: TAccountMetas[12];
    systemProgram: TAccountMetas[13];
    associatedTokenProgram: TAccountMetas[14];
    eventAuthority: TAccountMetas[15];
    program: TAccountMetas[16];
    coinCreatorVaultAta: TAccountMetas[17];
    coinCreatorVaultAuthority: TAccountMetas[18];
    globalVolumeAccumulator: TAccountMetas[19];
    userVolumeAccumulator: TAccountMetas[20];
    feeConfig: TAccountMetas[21];
    feeProgram: TAccountMetas[22];
  };
  data: BuyExactQuoteInInstructionData;
};

export function parseBuyExactQuoteInInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBuyExactQuoteInInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 23) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      user: getNextAccount(),
      globalConfig: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      userBaseTokenAccount: getNextAccount(),
      userQuoteTokenAccount: getNextAccount(),
      poolBaseTokenAccount: getNextAccount(),
      poolQuoteTokenAccount: getNextAccount(),
      protocolFeeRecipient: getNextAccount(),
      protocolFeeRecipientTokenAccount: getNextAccount(),
      baseTokenProgram: getNextAccount(),
      quoteTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
      coinCreatorVaultAta: getNextAccount(),
      coinCreatorVaultAuthority: getNextAccount(),
      globalVolumeAccumulator: getNextAccount(),
      userVolumeAccumulator: getNextAccount(),
      feeConfig: getNextAccount(),
      feeProgram: getNextAccount(),
    },
    data: getBuyExactQuoteInInstructionDataDecoder().decode(instruction.data),
  };
}
