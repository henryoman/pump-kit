/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { PUMP_AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const COLLECT_COIN_CREATOR_FEE_DISCRIMINATOR = new Uint8Array([
  160, 57, 89, 42, 181, 139, 43, 66,
]);

export function getCollectCoinCreatorFeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COLLECT_COIN_CREATOR_FEE_DISCRIMINATOR
  );
}

export type CollectCoinCreatorFeeInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountQuoteMint extends string | AccountMeta<string> = string,
  TAccountQuoteTokenProgram extends string | AccountMeta<string> = string,
  TAccountCoinCreator extends string | AccountMeta<string> = string,
  TAccountCoinCreatorVaultAuthority extends
    | string
    | AccountMeta<string> = string,
  TAccountCoinCreatorVaultAta extends string | AccountMeta<string> = string,
  TAccountCoinCreatorTokenAccount extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountQuoteTokenProgram extends string
        ? ReadonlyAccount<TAccountQuoteTokenProgram>
        : TAccountQuoteTokenProgram,
      TAccountCoinCreator extends string
        ? ReadonlyAccount<TAccountCoinCreator>
        : TAccountCoinCreator,
      TAccountCoinCreatorVaultAuthority extends string
        ? ReadonlyAccount<TAccountCoinCreatorVaultAuthority>
        : TAccountCoinCreatorVaultAuthority,
      TAccountCoinCreatorVaultAta extends string
        ? WritableAccount<TAccountCoinCreatorVaultAta>
        : TAccountCoinCreatorVaultAta,
      TAccountCoinCreatorTokenAccount extends string
        ? WritableAccount<TAccountCoinCreatorTokenAccount>
        : TAccountCoinCreatorTokenAccount,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CollectCoinCreatorFeeInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CollectCoinCreatorFeeInstructionDataArgs = {};

export function getCollectCoinCreatorFeeInstructionDataEncoder(): FixedSizeEncoder<CollectCoinCreatorFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: COLLECT_COIN_CREATOR_FEE_DISCRIMINATOR,
    })
  );
}

export function getCollectCoinCreatorFeeInstructionDataDecoder(): FixedSizeDecoder<CollectCoinCreatorFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCollectCoinCreatorFeeInstructionDataCodec(): FixedSizeCodec<
  CollectCoinCreatorFeeInstructionDataArgs,
  CollectCoinCreatorFeeInstructionData
> {
  return combineCodec(
    getCollectCoinCreatorFeeInstructionDataEncoder(),
    getCollectCoinCreatorFeeInstructionDataDecoder()
  );
}

export type CollectCoinCreatorFeeAsyncInput<
  TAccountQuoteMint extends string = string,
  TAccountQuoteTokenProgram extends string = string,
  TAccountCoinCreator extends string = string,
  TAccountCoinCreatorVaultAuthority extends string = string,
  TAccountCoinCreatorVaultAta extends string = string,
  TAccountCoinCreatorTokenAccount extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  quoteMint: Address<TAccountQuoteMint>;
  quoteTokenProgram: Address<TAccountQuoteTokenProgram>;
  coinCreator: Address<TAccountCoinCreator>;
  coinCreatorVaultAuthority?: Address<TAccountCoinCreatorVaultAuthority>;
  coinCreatorVaultAta?: Address<TAccountCoinCreatorVaultAta>;
  coinCreatorTokenAccount: Address<TAccountCoinCreatorTokenAccount>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export async function getCollectCoinCreatorFeeInstructionAsync<
  TAccountQuoteMint extends string,
  TAccountQuoteTokenProgram extends string,
  TAccountCoinCreator extends string,
  TAccountCoinCreatorVaultAuthority extends string,
  TAccountCoinCreatorVaultAta extends string,
  TAccountCoinCreatorTokenAccount extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: CollectCoinCreatorFeeAsyncInput<
    TAccountQuoteMint,
    TAccountQuoteTokenProgram,
    TAccountCoinCreator,
    TAccountCoinCreatorVaultAuthority,
    TAccountCoinCreatorVaultAta,
    TAccountCoinCreatorTokenAccount,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CollectCoinCreatorFeeInstruction<
    TProgramAddress,
    TAccountQuoteMint,
    TAccountQuoteTokenProgram,
    TAccountCoinCreator,
    TAccountCoinCreatorVaultAuthority,
    TAccountCoinCreatorVaultAta,
    TAccountCoinCreatorTokenAccount,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    quoteTokenProgram: {
      value: input.quoteTokenProgram ?? null,
      isWritable: false,
    },
    coinCreator: { value: input.coinCreator ?? null, isWritable: false },
    coinCreatorVaultAuthority: {
      value: input.coinCreatorVaultAuthority ?? null,
      isWritable: false,
    },
    coinCreatorVaultAta: {
      value: input.coinCreatorVaultAta ?? null,
      isWritable: true,
    },
    coinCreatorTokenAccount: {
      value: input.coinCreatorTokenAccount ?? null,
      isWritable: true,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.coinCreatorVaultAuthority.value) {
    accounts.coinCreatorVaultAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 114, 101, 97, 116, 111, 114, 95, 118, 97, 117, 108, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.coinCreator.value)),
      ],
    });
  }
  if (!accounts.coinCreatorVaultAta.value) {
    accounts.coinCreatorVaultAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.coinCreatorVaultAuthority.value)
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.quoteTokenProgram.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
      ],
    });
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.quoteTokenProgram),
      getAccountMeta(accounts.coinCreator),
      getAccountMeta(accounts.coinCreatorVaultAuthority),
      getAccountMeta(accounts.coinCreatorVaultAta),
      getAccountMeta(accounts.coinCreatorTokenAccount),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getCollectCoinCreatorFeeInstructionDataEncoder().encode({}),
    programAddress,
  } as CollectCoinCreatorFeeInstruction<
    TProgramAddress,
    TAccountQuoteMint,
    TAccountQuoteTokenProgram,
    TAccountCoinCreator,
    TAccountCoinCreatorVaultAuthority,
    TAccountCoinCreatorVaultAta,
    TAccountCoinCreatorTokenAccount,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type CollectCoinCreatorFeeInput<
  TAccountQuoteMint extends string = string,
  TAccountQuoteTokenProgram extends string = string,
  TAccountCoinCreator extends string = string,
  TAccountCoinCreatorVaultAuthority extends string = string,
  TAccountCoinCreatorVaultAta extends string = string,
  TAccountCoinCreatorTokenAccount extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  quoteMint: Address<TAccountQuoteMint>;
  quoteTokenProgram: Address<TAccountQuoteTokenProgram>;
  coinCreator: Address<TAccountCoinCreator>;
  coinCreatorVaultAuthority: Address<TAccountCoinCreatorVaultAuthority>;
  coinCreatorVaultAta: Address<TAccountCoinCreatorVaultAta>;
  coinCreatorTokenAccount: Address<TAccountCoinCreatorTokenAccount>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export function getCollectCoinCreatorFeeInstruction<
  TAccountQuoteMint extends string,
  TAccountQuoteTokenProgram extends string,
  TAccountCoinCreator extends string,
  TAccountCoinCreatorVaultAuthority extends string,
  TAccountCoinCreatorVaultAta extends string,
  TAccountCoinCreatorTokenAccount extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: CollectCoinCreatorFeeInput<
    TAccountQuoteMint,
    TAccountQuoteTokenProgram,
    TAccountCoinCreator,
    TAccountCoinCreatorVaultAuthority,
    TAccountCoinCreatorVaultAta,
    TAccountCoinCreatorTokenAccount,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CollectCoinCreatorFeeInstruction<
  TProgramAddress,
  TAccountQuoteMint,
  TAccountQuoteTokenProgram,
  TAccountCoinCreator,
  TAccountCoinCreatorVaultAuthority,
  TAccountCoinCreatorVaultAta,
  TAccountCoinCreatorTokenAccount,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    quoteTokenProgram: {
      value: input.quoteTokenProgram ?? null,
      isWritable: false,
    },
    coinCreator: { value: input.coinCreator ?? null, isWritable: false },
    coinCreatorVaultAuthority: {
      value: input.coinCreatorVaultAuthority ?? null,
      isWritable: false,
    },
    coinCreatorVaultAta: {
      value: input.coinCreatorVaultAta ?? null,
      isWritable: true,
    },
    coinCreatorTokenAccount: {
      value: input.coinCreatorTokenAccount ?? null,
      isWritable: true,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.quoteTokenProgram),
      getAccountMeta(accounts.coinCreator),
      getAccountMeta(accounts.coinCreatorVaultAuthority),
      getAccountMeta(accounts.coinCreatorVaultAta),
      getAccountMeta(accounts.coinCreatorTokenAccount),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getCollectCoinCreatorFeeInstructionDataEncoder().encode({}),
    programAddress,
  } as CollectCoinCreatorFeeInstruction<
    TProgramAddress,
    TAccountQuoteMint,
    TAccountQuoteTokenProgram,
    TAccountCoinCreator,
    TAccountCoinCreatorVaultAuthority,
    TAccountCoinCreatorVaultAta,
    TAccountCoinCreatorTokenAccount,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedCollectCoinCreatorFeeInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    quoteMint: TAccountMetas[0];
    quoteTokenProgram: TAccountMetas[1];
    coinCreator: TAccountMetas[2];
    coinCreatorVaultAuthority: TAccountMetas[3];
    coinCreatorVaultAta: TAccountMetas[4];
    coinCreatorTokenAccount: TAccountMetas[5];
    eventAuthority: TAccountMetas[6];
    program: TAccountMetas[7];
  };
  data: CollectCoinCreatorFeeInstructionData;
};

export function parseCollectCoinCreatorFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCollectCoinCreatorFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      quoteMint: getNextAccount(),
      quoteTokenProgram: getNextAccount(),
      coinCreator: getNextAccount(),
      coinCreatorVaultAuthority: getNextAccount(),
      coinCreatorVaultAta: getNextAccount(),
      coinCreatorTokenAccount: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCollectCoinCreatorFeeInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
