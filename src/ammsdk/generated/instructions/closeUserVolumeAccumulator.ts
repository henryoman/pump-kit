/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PUMP_AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLOSE_USER_VOLUME_ACCUMULATOR_DISCRIMINATOR = new Uint8Array([
  249, 69, 164, 218, 150, 103, 84, 138,
]);

export function getCloseUserVolumeAccumulatorDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_USER_VOLUME_ACCUMULATOR_DISCRIMINATOR
  );
}

export type CloseUserVolumeAccumulatorInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountUserVolumeAccumulator extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountUserVolumeAccumulator extends string
        ? WritableAccount<TAccountUserVolumeAccumulator>
        : TAccountUserVolumeAccumulator,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CloseUserVolumeAccumulatorInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CloseUserVolumeAccumulatorInstructionDataArgs = {};

export function getCloseUserVolumeAccumulatorInstructionDataEncoder(): FixedSizeEncoder<CloseUserVolumeAccumulatorInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: CLOSE_USER_VOLUME_ACCUMULATOR_DISCRIMINATOR,
    })
  );
}

export function getCloseUserVolumeAccumulatorInstructionDataDecoder(): FixedSizeDecoder<CloseUserVolumeAccumulatorInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseUserVolumeAccumulatorInstructionDataCodec(): FixedSizeCodec<
  CloseUserVolumeAccumulatorInstructionDataArgs,
  CloseUserVolumeAccumulatorInstructionData
> {
  return combineCodec(
    getCloseUserVolumeAccumulatorInstructionDataEncoder(),
    getCloseUserVolumeAccumulatorInstructionDataDecoder()
  );
}

export type CloseUserVolumeAccumulatorAsyncInput<
  TAccountUser extends string = string,
  TAccountUserVolumeAccumulator extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  userVolumeAccumulator?: Address<TAccountUserVolumeAccumulator>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export async function getCloseUserVolumeAccumulatorInstructionAsync<
  TAccountUser extends string,
  TAccountUserVolumeAccumulator extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: CloseUserVolumeAccumulatorAsyncInput<
    TAccountUser,
    TAccountUserVolumeAccumulator,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CloseUserVolumeAccumulatorInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountUserVolumeAccumulator,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    userVolumeAccumulator: {
      value: input.userVolumeAccumulator ?? null,
      isWritable: true,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.userVolumeAccumulator.value) {
    accounts.userVolumeAccumulator.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            117, 115, 101, 114, 95, 118, 111, 108, 117, 109, 101, 95, 97, 99,
            99, 117, 109, 117, 108, 97, 116, 111, 114,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.userVolumeAccumulator),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getCloseUserVolumeAccumulatorInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseUserVolumeAccumulatorInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountUserVolumeAccumulator,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type CloseUserVolumeAccumulatorInput<
  TAccountUser extends string = string,
  TAccountUserVolumeAccumulator extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  userVolumeAccumulator: Address<TAccountUserVolumeAccumulator>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export function getCloseUserVolumeAccumulatorInstruction<
  TAccountUser extends string,
  TAccountUserVolumeAccumulator extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: CloseUserVolumeAccumulatorInput<
    TAccountUser,
    TAccountUserVolumeAccumulator,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CloseUserVolumeAccumulatorInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountUserVolumeAccumulator,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    userVolumeAccumulator: {
      value: input.userVolumeAccumulator ?? null,
      isWritable: true,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.userVolumeAccumulator),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getCloseUserVolumeAccumulatorInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseUserVolumeAccumulatorInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountUserVolumeAccumulator,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedCloseUserVolumeAccumulatorInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    userVolumeAccumulator: TAccountMetas[1];
    eventAuthority: TAccountMetas[2];
    program: TAccountMetas[3];
  };
  data: CloseUserVolumeAccumulatorInstructionData;
};

export function parseCloseUserVolumeAccumulatorInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCloseUserVolumeAccumulatorInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      userVolumeAccumulator: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCloseUserVolumeAccumulatorInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
