/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PUMP_AMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_POOL_DISCRIMINATOR = new Uint8Array([
  233, 146, 209, 142, 207, 104, 64, 188,
]);

export function getCreatePoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CREATE_POOL_DISCRIMINATOR);
}

export type CreatePoolInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountGlobalConfig extends string | AccountMeta<string> = string,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountBaseMint extends string | AccountMeta<string> = string,
  TAccountQuoteMint extends string | AccountMeta<string> = string,
  TAccountLpMint extends string | AccountMeta<string> = string,
  TAccountUserBaseTokenAccount extends string | AccountMeta<string> = string,
  TAccountUserQuoteTokenAccount extends string | AccountMeta<string> = string,
  TAccountUserPoolTokenAccount extends string | AccountMeta<string> = string,
  TAccountPoolBaseTokenAccount extends string | AccountMeta<string> = string,
  TAccountPoolQuoteTokenAccount extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountToken2022Program extends
    | string
    | AccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountBaseTokenProgram extends string | AccountMeta<string> = string,
  TAccountQuoteTokenProgram extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountGlobalConfig extends string
        ? ReadonlyAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountBaseMint extends string
        ? ReadonlyAccount<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountUserBaseTokenAccount extends string
        ? WritableAccount<TAccountUserBaseTokenAccount>
        : TAccountUserBaseTokenAccount,
      TAccountUserQuoteTokenAccount extends string
        ? WritableAccount<TAccountUserQuoteTokenAccount>
        : TAccountUserQuoteTokenAccount,
      TAccountUserPoolTokenAccount extends string
        ? WritableAccount<TAccountUserPoolTokenAccount>
        : TAccountUserPoolTokenAccount,
      TAccountPoolBaseTokenAccount extends string
        ? WritableAccount<TAccountPoolBaseTokenAccount>
        : TAccountPoolBaseTokenAccount,
      TAccountPoolQuoteTokenAccount extends string
        ? WritableAccount<TAccountPoolQuoteTokenAccount>
        : TAccountPoolQuoteTokenAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      TAccountBaseTokenProgram extends string
        ? ReadonlyAccount<TAccountBaseTokenProgram>
        : TAccountBaseTokenProgram,
      TAccountQuoteTokenProgram extends string
        ? ReadonlyAccount<TAccountQuoteTokenProgram>
        : TAccountQuoteTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreatePoolInstructionData = {
  discriminator: ReadonlyUint8Array;
  index: number;
  baseAmountIn: bigint;
  quoteAmountIn: bigint;
  coinCreator: Address;
};

export type CreatePoolInstructionDataArgs = {
  index: number;
  baseAmountIn: number | bigint;
  quoteAmountIn: number | bigint;
  coinCreator: Address;
};

export function getCreatePoolInstructionDataEncoder(): FixedSizeEncoder<CreatePoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['index', getU16Encoder()],
      ['baseAmountIn', getU64Encoder()],
      ['quoteAmountIn', getU64Encoder()],
      ['coinCreator', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_POOL_DISCRIMINATOR })
  );
}

export function getCreatePoolInstructionDataDecoder(): FixedSizeDecoder<CreatePoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['index', getU16Decoder()],
    ['baseAmountIn', getU64Decoder()],
    ['quoteAmountIn', getU64Decoder()],
    ['coinCreator', getAddressDecoder()],
  ]);
}

export function getCreatePoolInstructionDataCodec(): FixedSizeCodec<
  CreatePoolInstructionDataArgs,
  CreatePoolInstructionData
> {
  return combineCodec(
    getCreatePoolInstructionDataEncoder(),
    getCreatePoolInstructionDataDecoder()
  );
}

export type CreatePoolAsyncInput<
  TAccountPool extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountCreator extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountLpMint extends string = string,
  TAccountUserBaseTokenAccount extends string = string,
  TAccountUserQuoteTokenAccount extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountPoolBaseTokenAccount extends string = string,
  TAccountPoolQuoteTokenAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountBaseTokenProgram extends string = string,
  TAccountQuoteTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  pool?: Address<TAccountPool>;
  globalConfig: Address<TAccountGlobalConfig>;
  creator: TransactionSigner<TAccountCreator>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  lpMint?: Address<TAccountLpMint>;
  userBaseTokenAccount: Address<TAccountUserBaseTokenAccount>;
  userQuoteTokenAccount: Address<TAccountUserQuoteTokenAccount>;
  userPoolTokenAccount?: Address<TAccountUserPoolTokenAccount>;
  poolBaseTokenAccount?: Address<TAccountPoolBaseTokenAccount>;
  poolQuoteTokenAccount?: Address<TAccountPoolQuoteTokenAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  token2022Program?: Address<TAccountToken2022Program>;
  baseTokenProgram: Address<TAccountBaseTokenProgram>;
  quoteTokenProgram: Address<TAccountQuoteTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  index: CreatePoolInstructionDataArgs['index'];
  baseAmountIn: CreatePoolInstructionDataArgs['baseAmountIn'];
  quoteAmountIn: CreatePoolInstructionDataArgs['quoteAmountIn'];
  coinCreator: CreatePoolInstructionDataArgs['coinCreator'];
};

export async function getCreatePoolInstructionAsync<
  TAccountPool extends string,
  TAccountGlobalConfig extends string,
  TAccountCreator extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountLpMint extends string,
  TAccountUserBaseTokenAccount extends string,
  TAccountUserQuoteTokenAccount extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountPoolBaseTokenAccount extends string,
  TAccountPoolQuoteTokenAccount extends string,
  TAccountSystemProgram extends string,
  TAccountToken2022Program extends string,
  TAccountBaseTokenProgram extends string,
  TAccountQuoteTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: CreatePoolAsyncInput<
    TAccountPool,
    TAccountGlobalConfig,
    TAccountCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountUserBaseTokenAccount,
    TAccountUserQuoteTokenAccount,
    TAccountUserPoolTokenAccount,
    TAccountPoolBaseTokenAccount,
    TAccountPoolQuoteTokenAccount,
    TAccountSystemProgram,
    TAccountToken2022Program,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreatePoolInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountGlobalConfig,
    TAccountCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountUserBaseTokenAccount,
    TAccountUserQuoteTokenAccount,
    TAccountUserPoolTokenAccount,
    TAccountPoolBaseTokenAccount,
    TAccountPoolQuoteTokenAccount,
    TAccountSystemProgram,
    TAccountToken2022Program,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    creator: { value: input.creator ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    userBaseTokenAccount: {
      value: input.userBaseTokenAccount ?? null,
      isWritable: true,
    },
    userQuoteTokenAccount: {
      value: input.userQuoteTokenAccount ?? null,
      isWritable: true,
    },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    poolBaseTokenAccount: {
      value: input.poolBaseTokenAccount ?? null,
      isWritable: true,
    },
    poolQuoteTokenAccount: {
      value: input.poolQuoteTokenAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    baseTokenProgram: {
      value: input.baseTokenProgram ?? null,
      isWritable: false,
    },
    quoteTokenProgram: {
      value: input.quoteTokenProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.pool.value) {
    accounts.pool.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([112, 111, 111, 108])),
        getU16Encoder().encode(expectSome(args.index)),
        getAddressEncoder().encode(expectAddress(accounts.creator.value)),
        getAddressEncoder().encode(expectAddress(accounts.baseMint.value)),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
      ],
    });
  }
  if (!accounts.lpMint.value) {
    accounts.lpMint.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 111, 108, 95, 108, 112, 95, 109, 105, 110, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
      ],
    });
  }
  if (!accounts.token2022Program.value) {
    accounts.token2022Program.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.userPoolTokenAccount.value) {
    accounts.userPoolTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.creator.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.token2022Program.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.lpMint.value)),
      ],
    });
  }
  if (!accounts.poolBaseTokenAccount.value) {
    accounts.poolBaseTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.baseTokenProgram.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.baseMint.value)),
      ],
    });
  }
  if (!accounts.poolQuoteTokenAccount.value) {
    accounts.poolQuoteTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.quoteTokenProgram.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.quoteMint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.userBaseTokenAccount),
      getAccountMeta(accounts.userQuoteTokenAccount),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.poolBaseTokenAccount),
      getAccountMeta(accounts.poolQuoteTokenAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.baseTokenProgram),
      getAccountMeta(accounts.quoteTokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getCreatePoolInstructionDataEncoder().encode(
      args as CreatePoolInstructionDataArgs
    ),
    programAddress,
  } as CreatePoolInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountGlobalConfig,
    TAccountCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountUserBaseTokenAccount,
    TAccountUserQuoteTokenAccount,
    TAccountUserPoolTokenAccount,
    TAccountPoolBaseTokenAccount,
    TAccountPoolQuoteTokenAccount,
    TAccountSystemProgram,
    TAccountToken2022Program,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type CreatePoolInput<
  TAccountPool extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountCreator extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountLpMint extends string = string,
  TAccountUserBaseTokenAccount extends string = string,
  TAccountUserQuoteTokenAccount extends string = string,
  TAccountUserPoolTokenAccount extends string = string,
  TAccountPoolBaseTokenAccount extends string = string,
  TAccountPoolQuoteTokenAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountBaseTokenProgram extends string = string,
  TAccountQuoteTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  pool: Address<TAccountPool>;
  globalConfig: Address<TAccountGlobalConfig>;
  creator: TransactionSigner<TAccountCreator>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  lpMint: Address<TAccountLpMint>;
  userBaseTokenAccount: Address<TAccountUserBaseTokenAccount>;
  userQuoteTokenAccount: Address<TAccountUserQuoteTokenAccount>;
  userPoolTokenAccount: Address<TAccountUserPoolTokenAccount>;
  poolBaseTokenAccount: Address<TAccountPoolBaseTokenAccount>;
  poolQuoteTokenAccount: Address<TAccountPoolQuoteTokenAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  token2022Program?: Address<TAccountToken2022Program>;
  baseTokenProgram: Address<TAccountBaseTokenProgram>;
  quoteTokenProgram: Address<TAccountQuoteTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  index: CreatePoolInstructionDataArgs['index'];
  baseAmountIn: CreatePoolInstructionDataArgs['baseAmountIn'];
  quoteAmountIn: CreatePoolInstructionDataArgs['quoteAmountIn'];
  coinCreator: CreatePoolInstructionDataArgs['coinCreator'];
};

export function getCreatePoolInstruction<
  TAccountPool extends string,
  TAccountGlobalConfig extends string,
  TAccountCreator extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountLpMint extends string,
  TAccountUserBaseTokenAccount extends string,
  TAccountUserQuoteTokenAccount extends string,
  TAccountUserPoolTokenAccount extends string,
  TAccountPoolBaseTokenAccount extends string,
  TAccountPoolQuoteTokenAccount extends string,
  TAccountSystemProgram extends string,
  TAccountToken2022Program extends string,
  TAccountBaseTokenProgram extends string,
  TAccountQuoteTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: CreatePoolInput<
    TAccountPool,
    TAccountGlobalConfig,
    TAccountCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountUserBaseTokenAccount,
    TAccountUserQuoteTokenAccount,
    TAccountUserPoolTokenAccount,
    TAccountPoolBaseTokenAccount,
    TAccountPoolQuoteTokenAccount,
    TAccountSystemProgram,
    TAccountToken2022Program,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreatePoolInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountGlobalConfig,
  TAccountCreator,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountLpMint,
  TAccountUserBaseTokenAccount,
  TAccountUserQuoteTokenAccount,
  TAccountUserPoolTokenAccount,
  TAccountPoolBaseTokenAccount,
  TAccountPoolQuoteTokenAccount,
  TAccountSystemProgram,
  TAccountToken2022Program,
  TAccountBaseTokenProgram,
  TAccountQuoteTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    creator: { value: input.creator ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    userBaseTokenAccount: {
      value: input.userBaseTokenAccount ?? null,
      isWritable: true,
    },
    userQuoteTokenAccount: {
      value: input.userQuoteTokenAccount ?? null,
      isWritable: true,
    },
    userPoolTokenAccount: {
      value: input.userPoolTokenAccount ?? null,
      isWritable: true,
    },
    poolBaseTokenAccount: {
      value: input.poolBaseTokenAccount ?? null,
      isWritable: true,
    },
    poolQuoteTokenAccount: {
      value: input.poolQuoteTokenAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    baseTokenProgram: {
      value: input.baseTokenProgram ?? null,
      isWritable: false,
    },
    quoteTokenProgram: {
      value: input.quoteTokenProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.token2022Program.value) {
    accounts.token2022Program.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.userBaseTokenAccount),
      getAccountMeta(accounts.userQuoteTokenAccount),
      getAccountMeta(accounts.userPoolTokenAccount),
      getAccountMeta(accounts.poolBaseTokenAccount),
      getAccountMeta(accounts.poolQuoteTokenAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.baseTokenProgram),
      getAccountMeta(accounts.quoteTokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getCreatePoolInstructionDataEncoder().encode(
      args as CreatePoolInstructionDataArgs
    ),
    programAddress,
  } as CreatePoolInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountGlobalConfig,
    TAccountCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountUserBaseTokenAccount,
    TAccountUserQuoteTokenAccount,
    TAccountUserPoolTokenAccount,
    TAccountPoolBaseTokenAccount,
    TAccountPoolQuoteTokenAccount,
    TAccountSystemProgram,
    TAccountToken2022Program,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedCreatePoolInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    pool: TAccountMetas[0];
    globalConfig: TAccountMetas[1];
    creator: TAccountMetas[2];
    baseMint: TAccountMetas[3];
    quoteMint: TAccountMetas[4];
    lpMint: TAccountMetas[5];
    userBaseTokenAccount: TAccountMetas[6];
    userQuoteTokenAccount: TAccountMetas[7];
    userPoolTokenAccount: TAccountMetas[8];
    poolBaseTokenAccount: TAccountMetas[9];
    poolQuoteTokenAccount: TAccountMetas[10];
    systemProgram: TAccountMetas[11];
    token2022Program: TAccountMetas[12];
    baseTokenProgram: TAccountMetas[13];
    quoteTokenProgram: TAccountMetas[14];
    associatedTokenProgram: TAccountMetas[15];
    eventAuthority: TAccountMetas[16];
    program: TAccountMetas[17];
  };
  data: CreatePoolInstructionData;
};

export function parseCreatePoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreatePoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 18) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      globalConfig: getNextAccount(),
      creator: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      lpMint: getNextAccount(),
      userBaseTokenAccount: getNextAccount(),
      userQuoteTokenAccount: getNextAccount(),
      userPoolTokenAccount: getNextAccount(),
      poolBaseTokenAccount: getNextAccount(),
      poolQuoteTokenAccount: getNextAccount(),
      systemProgram: getNextAccount(),
      token2022Program: getNextAccount(),
      baseTokenProgram: getNextAccount(),
      quoteTokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCreatePoolInstructionDataDecoder().decode(instruction.data),
  };
}
