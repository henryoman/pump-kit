/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { PUMP_AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADMIN_SET_COIN_CREATOR_DISCRIMINATOR = new Uint8Array([
  242, 40, 117, 145, 73, 96, 105, 104,
]);

export function getAdminSetCoinCreatorDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADMIN_SET_COIN_CREATOR_DISCRIMINATOR
  );
}

export type AdminSetCoinCreatorInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountAdminSetCoinCreatorAuthority extends
    | string
    | AccountMeta<string> = string,
  TAccountGlobalConfig extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdminSetCoinCreatorAuthority extends string
        ? ReadonlySignerAccount<TAccountAdminSetCoinCreatorAuthority> &
            AccountSignerMeta<TAccountAdminSetCoinCreatorAuthority>
        : TAccountAdminSetCoinCreatorAuthority,
      TAccountGlobalConfig extends string
        ? ReadonlyAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AdminSetCoinCreatorInstructionData = {
  discriminator: ReadonlyUint8Array;
  coinCreator: Address;
};

export type AdminSetCoinCreatorInstructionDataArgs = { coinCreator: Address };

export function getAdminSetCoinCreatorInstructionDataEncoder(): FixedSizeEncoder<AdminSetCoinCreatorInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['coinCreator', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: ADMIN_SET_COIN_CREATOR_DISCRIMINATOR,
    })
  );
}

export function getAdminSetCoinCreatorInstructionDataDecoder(): FixedSizeDecoder<AdminSetCoinCreatorInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['coinCreator', getAddressDecoder()],
  ]);
}

export function getAdminSetCoinCreatorInstructionDataCodec(): FixedSizeCodec<
  AdminSetCoinCreatorInstructionDataArgs,
  AdminSetCoinCreatorInstructionData
> {
  return combineCodec(
    getAdminSetCoinCreatorInstructionDataEncoder(),
    getAdminSetCoinCreatorInstructionDataDecoder()
  );
}

export type AdminSetCoinCreatorAsyncInput<
  TAccountAdminSetCoinCreatorAuthority extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountPool extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  adminSetCoinCreatorAuthority: TransactionSigner<TAccountAdminSetCoinCreatorAuthority>;
  globalConfig: Address<TAccountGlobalConfig>;
  pool: Address<TAccountPool>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  coinCreator: AdminSetCoinCreatorInstructionDataArgs['coinCreator'];
};

export async function getAdminSetCoinCreatorInstructionAsync<
  TAccountAdminSetCoinCreatorAuthority extends string,
  TAccountGlobalConfig extends string,
  TAccountPool extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: AdminSetCoinCreatorAsyncInput<
    TAccountAdminSetCoinCreatorAuthority,
    TAccountGlobalConfig,
    TAccountPool,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  AdminSetCoinCreatorInstruction<
    TProgramAddress,
    TAccountAdminSetCoinCreatorAuthority,
    TAccountGlobalConfig,
    TAccountPool,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    adminSetCoinCreatorAuthority: {
      value: input.adminSetCoinCreatorAuthority ?? null,
      isWritable: false,
    },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.adminSetCoinCreatorAuthority),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getAdminSetCoinCreatorInstructionDataEncoder().encode(
      args as AdminSetCoinCreatorInstructionDataArgs
    ),
    programAddress,
  } as AdminSetCoinCreatorInstruction<
    TProgramAddress,
    TAccountAdminSetCoinCreatorAuthority,
    TAccountGlobalConfig,
    TAccountPool,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type AdminSetCoinCreatorInput<
  TAccountAdminSetCoinCreatorAuthority extends string = string,
  TAccountGlobalConfig extends string = string,
  TAccountPool extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  adminSetCoinCreatorAuthority: TransactionSigner<TAccountAdminSetCoinCreatorAuthority>;
  globalConfig: Address<TAccountGlobalConfig>;
  pool: Address<TAccountPool>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  coinCreator: AdminSetCoinCreatorInstructionDataArgs['coinCreator'];
};

export function getAdminSetCoinCreatorInstruction<
  TAccountAdminSetCoinCreatorAuthority extends string,
  TAccountGlobalConfig extends string,
  TAccountPool extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PUMP_AMM_PROGRAM_ADDRESS,
>(
  input: AdminSetCoinCreatorInput<
    TAccountAdminSetCoinCreatorAuthority,
    TAccountGlobalConfig,
    TAccountPool,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AdminSetCoinCreatorInstruction<
  TProgramAddress,
  TAccountAdminSetCoinCreatorAuthority,
  TAccountGlobalConfig,
  TAccountPool,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    adminSetCoinCreatorAuthority: {
      value: input.adminSetCoinCreatorAuthority ?? null,
      isWritable: false,
    },
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.adminSetCoinCreatorAuthority),
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getAdminSetCoinCreatorInstructionDataEncoder().encode(
      args as AdminSetCoinCreatorInstructionDataArgs
    ),
    programAddress,
  } as AdminSetCoinCreatorInstruction<
    TProgramAddress,
    TAccountAdminSetCoinCreatorAuthority,
    TAccountGlobalConfig,
    TAccountPool,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedAdminSetCoinCreatorInstruction<
  TProgram extends string = typeof PUMP_AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    adminSetCoinCreatorAuthority: TAccountMetas[0];
    globalConfig: TAccountMetas[1];
    pool: TAccountMetas[2];
    eventAuthority: TAccountMetas[3];
    program: TAccountMetas[4];
  };
  data: AdminSetCoinCreatorInstructionData;
};

export function parseAdminSetCoinCreatorInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAdminSetCoinCreatorInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      adminSetCoinCreatorAuthority: getNextAccount(),
      globalConfig: getNextAccount(),
      pool: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getAdminSetCoinCreatorInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
