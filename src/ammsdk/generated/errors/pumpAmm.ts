/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { PUMP_AMM_PROGRAM_ADDRESS } from '../programs';

/** FeeBasisPointsExceedsMaximum:  */
export const PUMP_AMM_ERROR__FEE_BASIS_POINTS_EXCEEDS_MAXIMUM = 0x1770; // 6000
/** ZeroBaseAmount:  */
export const PUMP_AMM_ERROR__ZERO_BASE_AMOUNT = 0x1771; // 6001
/** ZeroQuoteAmount:  */
export const PUMP_AMM_ERROR__ZERO_QUOTE_AMOUNT = 0x1772; // 6002
/** TooLittlePoolTokenLiquidity:  */
export const PUMP_AMM_ERROR__TOO_LITTLE_POOL_TOKEN_LIQUIDITY = 0x1773; // 6003
/** ExceededSlippage:  */
export const PUMP_AMM_ERROR__EXCEEDED_SLIPPAGE = 0x1774; // 6004
/** InvalidAdmin:  */
export const PUMP_AMM_ERROR__INVALID_ADMIN = 0x1775; // 6005
/** UnsupportedBaseMint:  */
export const PUMP_AMM_ERROR__UNSUPPORTED_BASE_MINT = 0x1776; // 6006
/** UnsupportedQuoteMint:  */
export const PUMP_AMM_ERROR__UNSUPPORTED_QUOTE_MINT = 0x1777; // 6007
/** InvalidBaseMint:  */
export const PUMP_AMM_ERROR__INVALID_BASE_MINT = 0x1778; // 6008
/** InvalidQuoteMint:  */
export const PUMP_AMM_ERROR__INVALID_QUOTE_MINT = 0x1779; // 6009
/** InvalidLpMint:  */
export const PUMP_AMM_ERROR__INVALID_LP_MINT = 0x177a; // 6010
/** AllProtocolFeeRecipientsShouldBeNonZero:  */
export const PUMP_AMM_ERROR__ALL_PROTOCOL_FEE_RECIPIENTS_SHOULD_BE_NON_ZERO = 0x177b; // 6011
/** UnsortedNotUniqueProtocolFeeRecipients:  */
export const PUMP_AMM_ERROR__UNSORTED_NOT_UNIQUE_PROTOCOL_FEE_RECIPIENTS = 0x177c; // 6012
/** InvalidProtocolFeeRecipient:  */
export const PUMP_AMM_ERROR__INVALID_PROTOCOL_FEE_RECIPIENT = 0x177d; // 6013
/** InvalidPoolBaseTokenAccount:  */
export const PUMP_AMM_ERROR__INVALID_POOL_BASE_TOKEN_ACCOUNT = 0x177e; // 6014
/** InvalidPoolQuoteTokenAccount:  */
export const PUMP_AMM_ERROR__INVALID_POOL_QUOTE_TOKEN_ACCOUNT = 0x177f; // 6015
/** BuyMoreBaseAmountThanPoolReserves:  */
export const PUMP_AMM_ERROR__BUY_MORE_BASE_AMOUNT_THAN_POOL_RESERVES = 0x1780; // 6016
/** DisabledCreatePool:  */
export const PUMP_AMM_ERROR__DISABLED_CREATE_POOL = 0x1781; // 6017
/** DisabledDeposit:  */
export const PUMP_AMM_ERROR__DISABLED_DEPOSIT = 0x1782; // 6018
/** DisabledWithdraw:  */
export const PUMP_AMM_ERROR__DISABLED_WITHDRAW = 0x1783; // 6019
/** DisabledBuy:  */
export const PUMP_AMM_ERROR__DISABLED_BUY = 0x1784; // 6020
/** DisabledSell:  */
export const PUMP_AMM_ERROR__DISABLED_SELL = 0x1785; // 6021
/** SameMint:  */
export const PUMP_AMM_ERROR__SAME_MINT = 0x1786; // 6022
/** Overflow:  */
export const PUMP_AMM_ERROR__OVERFLOW = 0x1787; // 6023
/** Truncation:  */
export const PUMP_AMM_ERROR__TRUNCATION = 0x1788; // 6024
/** DivisionByZero:  */
export const PUMP_AMM_ERROR__DIVISION_BY_ZERO = 0x1789; // 6025
/** NewSizeLessThanCurrentSize:  */
export const PUMP_AMM_ERROR__NEW_SIZE_LESS_THAN_CURRENT_SIZE = 0x178a; // 6026
/** AccountTypeNotSupported:  */
export const PUMP_AMM_ERROR__ACCOUNT_TYPE_NOT_SUPPORTED = 0x178b; // 6027
/** OnlyCanonicalPumpPoolsCanHaveCoinCreator:  */
export const PUMP_AMM_ERROR__ONLY_CANONICAL_PUMP_POOLS_CAN_HAVE_COIN_CREATOR = 0x178c; // 6028
/** InvalidAdminSetCoinCreatorAuthority:  */
export const PUMP_AMM_ERROR__INVALID_ADMIN_SET_COIN_CREATOR_AUTHORITY = 0x178d; // 6029
/** StartTimeInThePast:  */
export const PUMP_AMM_ERROR__START_TIME_IN_THE_PAST = 0x178e; // 6030
/** EndTimeInThePast:  */
export const PUMP_AMM_ERROR__END_TIME_IN_THE_PAST = 0x178f; // 6031
/** EndTimeBeforeStartTime:  */
export const PUMP_AMM_ERROR__END_TIME_BEFORE_START_TIME = 0x1790; // 6032
/** TimeRangeTooLarge:  */
export const PUMP_AMM_ERROR__TIME_RANGE_TOO_LARGE = 0x1791; // 6033
/** EndTimeBeforeCurrentDay:  */
export const PUMP_AMM_ERROR__END_TIME_BEFORE_CURRENT_DAY = 0x1792; // 6034
/** SupplyUpdateForFinishedRange:  */
export const PUMP_AMM_ERROR__SUPPLY_UPDATE_FOR_FINISHED_RANGE = 0x1793; // 6035
/** DayIndexAfterEndIndex:  */
export const PUMP_AMM_ERROR__DAY_INDEX_AFTER_END_INDEX = 0x1794; // 6036
/** DayInActiveRange:  */
export const PUMP_AMM_ERROR__DAY_IN_ACTIVE_RANGE = 0x1795; // 6037
/** InvalidIncentiveMint:  */
export const PUMP_AMM_ERROR__INVALID_INCENTIVE_MINT = 0x1796; // 6038

export type PumpAmmError =
  | typeof PUMP_AMM_ERROR__ACCOUNT_TYPE_NOT_SUPPORTED
  | typeof PUMP_AMM_ERROR__ALL_PROTOCOL_FEE_RECIPIENTS_SHOULD_BE_NON_ZERO
  | typeof PUMP_AMM_ERROR__BUY_MORE_BASE_AMOUNT_THAN_POOL_RESERVES
  | typeof PUMP_AMM_ERROR__DAY_IN_ACTIVE_RANGE
  | typeof PUMP_AMM_ERROR__DAY_INDEX_AFTER_END_INDEX
  | typeof PUMP_AMM_ERROR__DISABLED_BUY
  | typeof PUMP_AMM_ERROR__DISABLED_CREATE_POOL
  | typeof PUMP_AMM_ERROR__DISABLED_DEPOSIT
  | typeof PUMP_AMM_ERROR__DISABLED_SELL
  | typeof PUMP_AMM_ERROR__DISABLED_WITHDRAW
  | typeof PUMP_AMM_ERROR__DIVISION_BY_ZERO
  | typeof PUMP_AMM_ERROR__END_TIME_BEFORE_CURRENT_DAY
  | typeof PUMP_AMM_ERROR__END_TIME_BEFORE_START_TIME
  | typeof PUMP_AMM_ERROR__END_TIME_IN_THE_PAST
  | typeof PUMP_AMM_ERROR__EXCEEDED_SLIPPAGE
  | typeof PUMP_AMM_ERROR__FEE_BASIS_POINTS_EXCEEDS_MAXIMUM
  | typeof PUMP_AMM_ERROR__INVALID_ADMIN
  | typeof PUMP_AMM_ERROR__INVALID_ADMIN_SET_COIN_CREATOR_AUTHORITY
  | typeof PUMP_AMM_ERROR__INVALID_BASE_MINT
  | typeof PUMP_AMM_ERROR__INVALID_INCENTIVE_MINT
  | typeof PUMP_AMM_ERROR__INVALID_LP_MINT
  | typeof PUMP_AMM_ERROR__INVALID_POOL_BASE_TOKEN_ACCOUNT
  | typeof PUMP_AMM_ERROR__INVALID_POOL_QUOTE_TOKEN_ACCOUNT
  | typeof PUMP_AMM_ERROR__INVALID_PROTOCOL_FEE_RECIPIENT
  | typeof PUMP_AMM_ERROR__INVALID_QUOTE_MINT
  | typeof PUMP_AMM_ERROR__NEW_SIZE_LESS_THAN_CURRENT_SIZE
  | typeof PUMP_AMM_ERROR__ONLY_CANONICAL_PUMP_POOLS_CAN_HAVE_COIN_CREATOR
  | typeof PUMP_AMM_ERROR__OVERFLOW
  | typeof PUMP_AMM_ERROR__SAME_MINT
  | typeof PUMP_AMM_ERROR__START_TIME_IN_THE_PAST
  | typeof PUMP_AMM_ERROR__SUPPLY_UPDATE_FOR_FINISHED_RANGE
  | typeof PUMP_AMM_ERROR__TIME_RANGE_TOO_LARGE
  | typeof PUMP_AMM_ERROR__TOO_LITTLE_POOL_TOKEN_LIQUIDITY
  | typeof PUMP_AMM_ERROR__TRUNCATION
  | typeof PUMP_AMM_ERROR__UNSORTED_NOT_UNIQUE_PROTOCOL_FEE_RECIPIENTS
  | typeof PUMP_AMM_ERROR__UNSUPPORTED_BASE_MINT
  | typeof PUMP_AMM_ERROR__UNSUPPORTED_QUOTE_MINT
  | typeof PUMP_AMM_ERROR__ZERO_BASE_AMOUNT
  | typeof PUMP_AMM_ERROR__ZERO_QUOTE_AMOUNT;

let pumpAmmErrorMessages: Record<PumpAmmError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  pumpAmmErrorMessages = {
    [PUMP_AMM_ERROR__ACCOUNT_TYPE_NOT_SUPPORTED]: ``,
    [PUMP_AMM_ERROR__ALL_PROTOCOL_FEE_RECIPIENTS_SHOULD_BE_NON_ZERO]: ``,
    [PUMP_AMM_ERROR__BUY_MORE_BASE_AMOUNT_THAN_POOL_RESERVES]: ``,
    [PUMP_AMM_ERROR__DAY_IN_ACTIVE_RANGE]: ``,
    [PUMP_AMM_ERROR__DAY_INDEX_AFTER_END_INDEX]: ``,
    [PUMP_AMM_ERROR__DISABLED_BUY]: ``,
    [PUMP_AMM_ERROR__DISABLED_CREATE_POOL]: ``,
    [PUMP_AMM_ERROR__DISABLED_DEPOSIT]: ``,
    [PUMP_AMM_ERROR__DISABLED_SELL]: ``,
    [PUMP_AMM_ERROR__DISABLED_WITHDRAW]: ``,
    [PUMP_AMM_ERROR__DIVISION_BY_ZERO]: ``,
    [PUMP_AMM_ERROR__END_TIME_BEFORE_CURRENT_DAY]: ``,
    [PUMP_AMM_ERROR__END_TIME_BEFORE_START_TIME]: ``,
    [PUMP_AMM_ERROR__END_TIME_IN_THE_PAST]: ``,
    [PUMP_AMM_ERROR__EXCEEDED_SLIPPAGE]: ``,
    [PUMP_AMM_ERROR__FEE_BASIS_POINTS_EXCEEDS_MAXIMUM]: ``,
    [PUMP_AMM_ERROR__INVALID_ADMIN]: ``,
    [PUMP_AMM_ERROR__INVALID_ADMIN_SET_COIN_CREATOR_AUTHORITY]: ``,
    [PUMP_AMM_ERROR__INVALID_BASE_MINT]: ``,
    [PUMP_AMM_ERROR__INVALID_INCENTIVE_MINT]: ``,
    [PUMP_AMM_ERROR__INVALID_LP_MINT]: ``,
    [PUMP_AMM_ERROR__INVALID_POOL_BASE_TOKEN_ACCOUNT]: ``,
    [PUMP_AMM_ERROR__INVALID_POOL_QUOTE_TOKEN_ACCOUNT]: ``,
    [PUMP_AMM_ERROR__INVALID_PROTOCOL_FEE_RECIPIENT]: ``,
    [PUMP_AMM_ERROR__INVALID_QUOTE_MINT]: ``,
    [PUMP_AMM_ERROR__NEW_SIZE_LESS_THAN_CURRENT_SIZE]: ``,
    [PUMP_AMM_ERROR__ONLY_CANONICAL_PUMP_POOLS_CAN_HAVE_COIN_CREATOR]: ``,
    [PUMP_AMM_ERROR__OVERFLOW]: ``,
    [PUMP_AMM_ERROR__SAME_MINT]: ``,
    [PUMP_AMM_ERROR__START_TIME_IN_THE_PAST]: ``,
    [PUMP_AMM_ERROR__SUPPLY_UPDATE_FOR_FINISHED_RANGE]: ``,
    [PUMP_AMM_ERROR__TIME_RANGE_TOO_LARGE]: ``,
    [PUMP_AMM_ERROR__TOO_LITTLE_POOL_TOKEN_LIQUIDITY]: ``,
    [PUMP_AMM_ERROR__TRUNCATION]: ``,
    [PUMP_AMM_ERROR__UNSORTED_NOT_UNIQUE_PROTOCOL_FEE_RECIPIENTS]: ``,
    [PUMP_AMM_ERROR__UNSUPPORTED_BASE_MINT]: ``,
    [PUMP_AMM_ERROR__UNSUPPORTED_QUOTE_MINT]: ``,
    [PUMP_AMM_ERROR__ZERO_BASE_AMOUNT]: ``,
    [PUMP_AMM_ERROR__ZERO_QUOTE_AMOUNT]: ``,
  };
}

export function getPumpAmmErrorMessage(code: PumpAmmError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (pumpAmmErrorMessages as Record<PumpAmmError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isPumpAmmError<TProgramErrorCode extends PumpAmmError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    PUMP_AMM_PROGRAM_ADDRESS,
    code
  );
}
