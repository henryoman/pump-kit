/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from '@solana/kit';

export type CreatePoolEvent = {
  timestamp: bigint;
  index: number;
  creator: Address;
  baseMint: Address;
  quoteMint: Address;
  baseMintDecimals: number;
  quoteMintDecimals: number;
  baseAmountIn: bigint;
  quoteAmountIn: bigint;
  poolBaseAmount: bigint;
  poolQuoteAmount: bigint;
  minimumLiquidity: bigint;
  initialLiquidity: bigint;
  lpTokenAmountOut: bigint;
  poolBump: number;
  pool: Address;
  lpMint: Address;
  userBaseTokenAccount: Address;
  userQuoteTokenAccount: Address;
  coinCreator: Address;
};

export type CreatePoolEventArgs = {
  timestamp: number | bigint;
  index: number;
  creator: Address;
  baseMint: Address;
  quoteMint: Address;
  baseMintDecimals: number;
  quoteMintDecimals: number;
  baseAmountIn: number | bigint;
  quoteAmountIn: number | bigint;
  poolBaseAmount: number | bigint;
  poolQuoteAmount: number | bigint;
  minimumLiquidity: number | bigint;
  initialLiquidity: number | bigint;
  lpTokenAmountOut: number | bigint;
  poolBump: number;
  pool: Address;
  lpMint: Address;
  userBaseTokenAccount: Address;
  userQuoteTokenAccount: Address;
  coinCreator: Address;
};

export function getCreatePoolEventEncoder(): FixedSizeEncoder<CreatePoolEventArgs> {
  return getStructEncoder([
    ['timestamp', getI64Encoder()],
    ['index', getU16Encoder()],
    ['creator', getAddressEncoder()],
    ['baseMint', getAddressEncoder()],
    ['quoteMint', getAddressEncoder()],
    ['baseMintDecimals', getU8Encoder()],
    ['quoteMintDecimals', getU8Encoder()],
    ['baseAmountIn', getU64Encoder()],
    ['quoteAmountIn', getU64Encoder()],
    ['poolBaseAmount', getU64Encoder()],
    ['poolQuoteAmount', getU64Encoder()],
    ['minimumLiquidity', getU64Encoder()],
    ['initialLiquidity', getU64Encoder()],
    ['lpTokenAmountOut', getU64Encoder()],
    ['poolBump', getU8Encoder()],
    ['pool', getAddressEncoder()],
    ['lpMint', getAddressEncoder()],
    ['userBaseTokenAccount', getAddressEncoder()],
    ['userQuoteTokenAccount', getAddressEncoder()],
    ['coinCreator', getAddressEncoder()],
  ]);
}

export function getCreatePoolEventDecoder(): FixedSizeDecoder<CreatePoolEvent> {
  return getStructDecoder([
    ['timestamp', getI64Decoder()],
    ['index', getU16Decoder()],
    ['creator', getAddressDecoder()],
    ['baseMint', getAddressDecoder()],
    ['quoteMint', getAddressDecoder()],
    ['baseMintDecimals', getU8Decoder()],
    ['quoteMintDecimals', getU8Decoder()],
    ['baseAmountIn', getU64Decoder()],
    ['quoteAmountIn', getU64Decoder()],
    ['poolBaseAmount', getU64Decoder()],
    ['poolQuoteAmount', getU64Decoder()],
    ['minimumLiquidity', getU64Decoder()],
    ['initialLiquidity', getU64Decoder()],
    ['lpTokenAmountOut', getU64Decoder()],
    ['poolBump', getU8Decoder()],
    ['pool', getAddressDecoder()],
    ['lpMint', getAddressDecoder()],
    ['userBaseTokenAccount', getAddressDecoder()],
    ['userQuoteTokenAccount', getAddressDecoder()],
    ['coinCreator', getAddressDecoder()],
  ]);
}

export function getCreatePoolEventCodec(): FixedSizeCodec<
  CreatePoolEventArgs,
  CreatePoolEvent
> {
  return combineCodec(getCreatePoolEventEncoder(), getCreatePoolEventDecoder());
}
