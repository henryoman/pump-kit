/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from '@solana/kit';

export type WithdrawEvent = {
  timestamp: bigint;
  lpTokenAmountIn: bigint;
  minBaseAmountOut: bigint;
  minQuoteAmountOut: bigint;
  userBaseTokenReserves: bigint;
  userQuoteTokenReserves: bigint;
  poolBaseTokenReserves: bigint;
  poolQuoteTokenReserves: bigint;
  baseAmountOut: bigint;
  quoteAmountOut: bigint;
  lpMintSupply: bigint;
  pool: Address;
  user: Address;
  userBaseTokenAccount: Address;
  userQuoteTokenAccount: Address;
  userPoolTokenAccount: Address;
};

export type WithdrawEventArgs = {
  timestamp: number | bigint;
  lpTokenAmountIn: number | bigint;
  minBaseAmountOut: number | bigint;
  minQuoteAmountOut: number | bigint;
  userBaseTokenReserves: number | bigint;
  userQuoteTokenReserves: number | bigint;
  poolBaseTokenReserves: number | bigint;
  poolQuoteTokenReserves: number | bigint;
  baseAmountOut: number | bigint;
  quoteAmountOut: number | bigint;
  lpMintSupply: number | bigint;
  pool: Address;
  user: Address;
  userBaseTokenAccount: Address;
  userQuoteTokenAccount: Address;
  userPoolTokenAccount: Address;
};

export function getWithdrawEventEncoder(): FixedSizeEncoder<WithdrawEventArgs> {
  return getStructEncoder([
    ['timestamp', getI64Encoder()],
    ['lpTokenAmountIn', getU64Encoder()],
    ['minBaseAmountOut', getU64Encoder()],
    ['minQuoteAmountOut', getU64Encoder()],
    ['userBaseTokenReserves', getU64Encoder()],
    ['userQuoteTokenReserves', getU64Encoder()],
    ['poolBaseTokenReserves', getU64Encoder()],
    ['poolQuoteTokenReserves', getU64Encoder()],
    ['baseAmountOut', getU64Encoder()],
    ['quoteAmountOut', getU64Encoder()],
    ['lpMintSupply', getU64Encoder()],
    ['pool', getAddressEncoder()],
    ['user', getAddressEncoder()],
    ['userBaseTokenAccount', getAddressEncoder()],
    ['userQuoteTokenAccount', getAddressEncoder()],
    ['userPoolTokenAccount', getAddressEncoder()],
  ]);
}

export function getWithdrawEventDecoder(): FixedSizeDecoder<WithdrawEvent> {
  return getStructDecoder([
    ['timestamp', getI64Decoder()],
    ['lpTokenAmountIn', getU64Decoder()],
    ['minBaseAmountOut', getU64Decoder()],
    ['minQuoteAmountOut', getU64Decoder()],
    ['userBaseTokenReserves', getU64Decoder()],
    ['userQuoteTokenReserves', getU64Decoder()],
    ['poolBaseTokenReserves', getU64Decoder()],
    ['poolQuoteTokenReserves', getU64Decoder()],
    ['baseAmountOut', getU64Decoder()],
    ['quoteAmountOut', getU64Decoder()],
    ['lpMintSupply', getU64Decoder()],
    ['pool', getAddressDecoder()],
    ['user', getAddressDecoder()],
    ['userBaseTokenAccount', getAddressDecoder()],
    ['userQuoteTokenAccount', getAddressDecoder()],
    ['userPoolTokenAccount', getAddressDecoder()],
  ]);
}

export function getWithdrawEventCodec(): FixedSizeCodec<
  WithdrawEventArgs,
  WithdrawEvent
> {
  return combineCodec(getWithdrawEventEncoder(), getWithdrawEventDecoder());
}
