/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from '@solana/kit';

export type SellEvent = {
  timestamp: bigint;
  baseAmountIn: bigint;
  minQuoteAmountOut: bigint;
  userBaseTokenReserves: bigint;
  userQuoteTokenReserves: bigint;
  poolBaseTokenReserves: bigint;
  poolQuoteTokenReserves: bigint;
  quoteAmountOut: bigint;
  lpFeeBasisPoints: bigint;
  lpFee: bigint;
  protocolFeeBasisPoints: bigint;
  protocolFee: bigint;
  quoteAmountOutWithoutLpFee: bigint;
  userQuoteAmountOut: bigint;
  pool: Address;
  user: Address;
  userBaseTokenAccount: Address;
  userQuoteTokenAccount: Address;
  protocolFeeRecipient: Address;
  protocolFeeRecipientTokenAccount: Address;
  coinCreator: Address;
  coinCreatorFeeBasisPoints: bigint;
  coinCreatorFee: bigint;
};

export type SellEventArgs = {
  timestamp: number | bigint;
  baseAmountIn: number | bigint;
  minQuoteAmountOut: number | bigint;
  userBaseTokenReserves: number | bigint;
  userQuoteTokenReserves: number | bigint;
  poolBaseTokenReserves: number | bigint;
  poolQuoteTokenReserves: number | bigint;
  quoteAmountOut: number | bigint;
  lpFeeBasisPoints: number | bigint;
  lpFee: number | bigint;
  protocolFeeBasisPoints: number | bigint;
  protocolFee: number | bigint;
  quoteAmountOutWithoutLpFee: number | bigint;
  userQuoteAmountOut: number | bigint;
  pool: Address;
  user: Address;
  userBaseTokenAccount: Address;
  userQuoteTokenAccount: Address;
  protocolFeeRecipient: Address;
  protocolFeeRecipientTokenAccount: Address;
  coinCreator: Address;
  coinCreatorFeeBasisPoints: number | bigint;
  coinCreatorFee: number | bigint;
};

export function getSellEventEncoder(): FixedSizeEncoder<SellEventArgs> {
  return getStructEncoder([
    ['timestamp', getI64Encoder()],
    ['baseAmountIn', getU64Encoder()],
    ['minQuoteAmountOut', getU64Encoder()],
    ['userBaseTokenReserves', getU64Encoder()],
    ['userQuoteTokenReserves', getU64Encoder()],
    ['poolBaseTokenReserves', getU64Encoder()],
    ['poolQuoteTokenReserves', getU64Encoder()],
    ['quoteAmountOut', getU64Encoder()],
    ['lpFeeBasisPoints', getU64Encoder()],
    ['lpFee', getU64Encoder()],
    ['protocolFeeBasisPoints', getU64Encoder()],
    ['protocolFee', getU64Encoder()],
    ['quoteAmountOutWithoutLpFee', getU64Encoder()],
    ['userQuoteAmountOut', getU64Encoder()],
    ['pool', getAddressEncoder()],
    ['user', getAddressEncoder()],
    ['userBaseTokenAccount', getAddressEncoder()],
    ['userQuoteTokenAccount', getAddressEncoder()],
    ['protocolFeeRecipient', getAddressEncoder()],
    ['protocolFeeRecipientTokenAccount', getAddressEncoder()],
    ['coinCreator', getAddressEncoder()],
    ['coinCreatorFeeBasisPoints', getU64Encoder()],
    ['coinCreatorFee', getU64Encoder()],
  ]);
}

export function getSellEventDecoder(): FixedSizeDecoder<SellEvent> {
  return getStructDecoder([
    ['timestamp', getI64Decoder()],
    ['baseAmountIn', getU64Decoder()],
    ['minQuoteAmountOut', getU64Decoder()],
    ['userBaseTokenReserves', getU64Decoder()],
    ['userQuoteTokenReserves', getU64Decoder()],
    ['poolBaseTokenReserves', getU64Decoder()],
    ['poolQuoteTokenReserves', getU64Decoder()],
    ['quoteAmountOut', getU64Decoder()],
    ['lpFeeBasisPoints', getU64Decoder()],
    ['lpFee', getU64Decoder()],
    ['protocolFeeBasisPoints', getU64Decoder()],
    ['protocolFee', getU64Decoder()],
    ['quoteAmountOutWithoutLpFee', getU64Decoder()],
    ['userQuoteAmountOut', getU64Decoder()],
    ['pool', getAddressDecoder()],
    ['user', getAddressDecoder()],
    ['userBaseTokenAccount', getAddressDecoder()],
    ['userQuoteTokenAccount', getAddressDecoder()],
    ['protocolFeeRecipient', getAddressDecoder()],
    ['protocolFeeRecipientTokenAccount', getAddressDecoder()],
    ['coinCreator', getAddressDecoder()],
    ['coinCreatorFeeBasisPoints', getU64Decoder()],
    ['coinCreatorFee', getU64Decoder()],
  ]);
}

export function getSellEventCodec(): FixedSizeCodec<SellEventArgs, SellEvent> {
  return combineCodec(getSellEventEncoder(), getSellEventDecoder());
}
