/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getFeesDecoder,
  getFeesEncoder,
  getFeeTierDecoder,
  getFeeTierEncoder,
  type Fees,
  type FeesArgs,
  type FeeTier,
  type FeeTierArgs,
} from '../types';

export const FEE_CONFIG_DISCRIMINATOR = new Uint8Array([
  143, 52, 146, 187, 219, 123, 76, 155,
]);

export function getFeeConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(FEE_CONFIG_DISCRIMINATOR);
}

export type FeeConfig = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  admin: Address;
  flatFees: Fees;
  feeTiers: Array<FeeTier>;
};

export type FeeConfigArgs = {
  bump: number;
  admin: Address;
  flatFees: FeesArgs;
  feeTiers: Array<FeeTierArgs>;
};

export function getFeeConfigEncoder(): Encoder<FeeConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['admin', getAddressEncoder()],
      ['flatFees', getFeesEncoder()],
      ['feeTiers', getArrayEncoder(getFeeTierEncoder())],
    ]),
    (value) => ({ ...value, discriminator: FEE_CONFIG_DISCRIMINATOR })
  );
}

export function getFeeConfigDecoder(): Decoder<FeeConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['admin', getAddressDecoder()],
    ['flatFees', getFeesDecoder()],
    ['feeTiers', getArrayDecoder(getFeeTierDecoder())],
  ]);
}

export function getFeeConfigCodec(): Codec<FeeConfigArgs, FeeConfig> {
  return combineCodec(getFeeConfigEncoder(), getFeeConfigDecoder());
}

export function decodeFeeConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<FeeConfig, TAddress>;
export function decodeFeeConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<FeeConfig, TAddress>;
export function decodeFeeConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<FeeConfig, TAddress> | MaybeAccount<FeeConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getFeeConfigDecoder()
  );
}

export async function fetchFeeConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<FeeConfig, TAddress>> {
  const maybeAccount = await fetchMaybeFeeConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeFeeConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<FeeConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeFeeConfig(maybeAccount);
}

export async function fetchAllFeeConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<FeeConfig>[]> {
  const maybeAccounts = await fetchAllMaybeFeeConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeFeeConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<FeeConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeFeeConfig(maybeAccount));
}
