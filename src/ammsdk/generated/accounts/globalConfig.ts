/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const GLOBAL_CONFIG_DISCRIMINATOR = new Uint8Array([
  149, 8, 156, 202, 160, 252, 176, 217,
]);

export function getGlobalConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GLOBAL_CONFIG_DISCRIMINATOR
  );
}

export type GlobalConfig = {
  discriminator: ReadonlyUint8Array;
  /** The admin pubkey */
  admin: Address;
  lpFeeBasisPoints: bigint;
  protocolFeeBasisPoints: bigint;
  /**
   * Flags to disable certain functionality
   * bit 0 - Disable create pool
   * bit 1 - Disable deposit
   * bit 2 - Disable withdraw
   * bit 3 - Disable buy
   * bit 4 - Disable sell
   */
  disableFlags: number;
  /** Addresses of the protocol fee recipients */
  protocolFeeRecipients: Array<Address>;
  coinCreatorFeeBasisPoints: bigint;
  /** The admin authority for setting coin creators */
  adminSetCoinCreatorAuthority: Address;
};

export type GlobalConfigArgs = {
  /** The admin pubkey */
  admin: Address;
  lpFeeBasisPoints: number | bigint;
  protocolFeeBasisPoints: number | bigint;
  /**
   * Flags to disable certain functionality
   * bit 0 - Disable create pool
   * bit 1 - Disable deposit
   * bit 2 - Disable withdraw
   * bit 3 - Disable buy
   * bit 4 - Disable sell
   */
  disableFlags: number;
  /** Addresses of the protocol fee recipients */
  protocolFeeRecipients: Array<Address>;
  coinCreatorFeeBasisPoints: number | bigint;
  /** The admin authority for setting coin creators */
  adminSetCoinCreatorAuthority: Address;
};

export function getGlobalConfigEncoder(): FixedSizeEncoder<GlobalConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['admin', getAddressEncoder()],
      ['lpFeeBasisPoints', getU64Encoder()],
      ['protocolFeeBasisPoints', getU64Encoder()],
      ['disableFlags', getU8Encoder()],
      [
        'protocolFeeRecipients',
        getArrayEncoder(getAddressEncoder(), { size: 8 }),
      ],
      ['coinCreatorFeeBasisPoints', getU64Encoder()],
      ['adminSetCoinCreatorAuthority', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: GLOBAL_CONFIG_DISCRIMINATOR })
  );
}

export function getGlobalConfigDecoder(): FixedSizeDecoder<GlobalConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['admin', getAddressDecoder()],
    ['lpFeeBasisPoints', getU64Decoder()],
    ['protocolFeeBasisPoints', getU64Decoder()],
    ['disableFlags', getU8Decoder()],
    [
      'protocolFeeRecipients',
      getArrayDecoder(getAddressDecoder(), { size: 8 }),
    ],
    ['coinCreatorFeeBasisPoints', getU64Decoder()],
    ['adminSetCoinCreatorAuthority', getAddressDecoder()],
  ]);
}

export function getGlobalConfigCodec(): FixedSizeCodec<
  GlobalConfigArgs,
  GlobalConfig
> {
  return combineCodec(getGlobalConfigEncoder(), getGlobalConfigDecoder());
}

export function decodeGlobalConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<GlobalConfig, TAddress>;
export function decodeGlobalConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<GlobalConfig, TAddress>;
export function decodeGlobalConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<GlobalConfig, TAddress> | MaybeAccount<GlobalConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getGlobalConfigDecoder()
  );
}

export async function fetchGlobalConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<GlobalConfig, TAddress>> {
  const maybeAccount = await fetchMaybeGlobalConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeGlobalConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<GlobalConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeGlobalConfig(maybeAccount);
}

export async function fetchAllGlobalConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<GlobalConfig>[]> {
  const maybeAccounts = await fetchAllMaybeGlobalConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeGlobalConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<GlobalConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeGlobalConfig(maybeAccount));
}

export function getGlobalConfigSize(): number {
  return 353;
}
