/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const POOL_DISCRIMINATOR = new Uint8Array([
  241, 154, 109, 4, 17, 177, 109, 188,
]);

export function getPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(POOL_DISCRIMINATOR);
}

export type Pool = {
  discriminator: ReadonlyUint8Array;
  poolBump: number;
  index: number;
  creator: Address;
  baseMint: Address;
  quoteMint: Address;
  lpMint: Address;
  poolBaseTokenAccount: Address;
  poolQuoteTokenAccount: Address;
  /** True circulating supply without burns and lock-ups */
  lpSupply: bigint;
  coinCreator: Address;
};

export type PoolArgs = {
  poolBump: number;
  index: number;
  creator: Address;
  baseMint: Address;
  quoteMint: Address;
  lpMint: Address;
  poolBaseTokenAccount: Address;
  poolQuoteTokenAccount: Address;
  /** True circulating supply without burns and lock-ups */
  lpSupply: number | bigint;
  coinCreator: Address;
};

export function getPoolEncoder(): FixedSizeEncoder<PoolArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['poolBump', getU8Encoder()],
      ['index', getU16Encoder()],
      ['creator', getAddressEncoder()],
      ['baseMint', getAddressEncoder()],
      ['quoteMint', getAddressEncoder()],
      ['lpMint', getAddressEncoder()],
      ['poolBaseTokenAccount', getAddressEncoder()],
      ['poolQuoteTokenAccount', getAddressEncoder()],
      ['lpSupply', getU64Encoder()],
      ['coinCreator', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: POOL_DISCRIMINATOR })
  );
}

export function getPoolDecoder(): FixedSizeDecoder<Pool> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['poolBump', getU8Decoder()],
    ['index', getU16Decoder()],
    ['creator', getAddressDecoder()],
    ['baseMint', getAddressDecoder()],
    ['quoteMint', getAddressDecoder()],
    ['lpMint', getAddressDecoder()],
    ['poolBaseTokenAccount', getAddressDecoder()],
    ['poolQuoteTokenAccount', getAddressDecoder()],
    ['lpSupply', getU64Decoder()],
    ['coinCreator', getAddressDecoder()],
  ]);
}

export function getPoolCodec(): FixedSizeCodec<PoolArgs, Pool> {
  return combineCodec(getPoolEncoder(), getPoolDecoder());
}

export function decodePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Pool, TAddress>;
export function decodePool<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Pool, TAddress>;
export function decodePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Pool, TAddress> | MaybeAccount<Pool, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPoolDecoder()
  );
}

export async function fetchPool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Pool, TAddress>> {
  const maybeAccount = await fetchMaybePool(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Pool, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePool(maybeAccount);
}

export async function fetchAllPool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Pool>[]> {
  const maybeAccounts = await fetchAllMaybePool(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Pool>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePool(maybeAccount));
}

export function getPoolSize(): number {
  return 243;
}
